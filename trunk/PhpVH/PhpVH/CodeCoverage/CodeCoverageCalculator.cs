using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Components;

namespace PhpVH.CodeCoverage
{
    public class CodeCoverageCalculator
    {
        public Annotator Annotator { get; private set; }

        public CodeCoverageCalculator(Annotator annotator)
        {
            Annotator = annotator;
        }

        public CodeCoverageTable CalculateCoverage()
        {
            if (!Annotator.AnnotationFile.Exists)
            {
                return new CodeCoverageTable();
            }

            var entries = new List<string>();

            using (var reader = new StreamReader(Annotator.AnnotationFile.OpenRead()))
            {
                string entry;

                while ((entry = reader.ReadLine()) != null)
                {
                    if (!entries.Contains(entry))
                    {
                        entries.Add(entry);
                    }
                }
            }

            var entryTable = new CodeCoverageTable();

            foreach (var entry in entries)
            {
                try
                {
                    var filename = entry.RemoveAtLastIndexOf('_');
                    var id = int.Parse(entry.SubstringAtLastIndexOf('_', 1));
                    Annotator.IndexTable[filename].GetById(id).HitCount++;

                    if (entryTable.ContainsKey(filename))
                        entryTable[filename]++;
                    else
                        entryTable.Add(filename, 1);
                }
                catch (System.Exception ex)
                {
#if DEBUG
                    TraceHelper.WriteLineFormat(ex.ToString());
#endif
                }
            }

            var template = @"<!DOCTYPE html>

<html lang=""en"" xmlns=""http://www.w3.org/1999/xhtml"">
<head>
    <meta charset=""utf-8"" />
    <title></title>
</head>
<body>
    <style type=""text/css"">
        .covered {{
            float: left;
            background-color: green;
        }}
        .uncovered {{
            float: left;
            background-color: red;
        }}
    </style>
    {0}
</body>
</html>";

            //IndexTable
            //    .Select(x => new
            //    {
            //        Filename = x.Filename,
            //        Code = File.ReadAllText(x.Filename + "b"),
            //        Annotations = x.OrderByDescending(y => y.Index).ToArray(),
            //    })
            //    .Select(x => new
            //    {
            //        Code = string.Format(
            //            template,
            //            new StringBuilder(HttpUtility.HtmlEncode(
            //            x.Annotations
            //                .Aggregate(
            //                    new StringBuilder(x.Code),
            //                    (sb, y) => sb.Insert(
            //                        y.Index,
            //                        y.HitCount > 0 ? @"$$$covered$$$" : @"$$$uncovered$$$"))))
            //            .Replace("\r\n", "\n")
            //            .Replace('\r', '\n')
            //            .Replace("\n", "<br />")
            //            .Replace("$$$covered$$$", @"</div><div class=""covered"">")
            //            .Replace("$$$uncovered$$$", @"</div><div class=""uncovered"">")
            //            .Insert(0, @"<div class=""covered"">")
            //            .Append("</div>")
            //            .ToString()),
            //        Filename = x.Filename,
            //    })
            //    .ToArray()
            //    .Iter(x => File.WriteAllText(string.Format(@"c:\temp\{0}.txt", Path.GetFileName(x.Filename)), x.Code));


            //    .Select(x => 
            //    {
            //    });
            //.Aggregate(new StringBuilder(), (sb, x) => sb.Append(x.
            //;

            Func<Annotation, bool> wasHit = x => x.HitCount > 0;

            lock (Annotator.AnnotationTable)
            {
                var hitBlockCount = (decimal)Annotator.IndexTable
                    .SelectMany(x => x.Where(wasHit))
                    .Count();

                var totalBlockCount = Annotator.IndexTable
                    .SelectMany(x => x)
                    .Count();

                entryTable.Total = hitBlockCount / totalBlockCount * 100;

                var fileHits = Annotator.IndexTable
                    .Select(x => new
                    {
                        Filename = x.Filename,
                        HitBlockCount = x.Count(wasHit),
                        TotalBlockCount = x.Count,
                        Coverage = (decimal)x.Count(wasHit) / x.Count * 100,
                    });

                foreach (var key in Annotator.AnnotationTable.Keys)
                {
                    if (entryTable.ContainsKey(key))
                        entryTable[key] = entryTable[key] / Annotator.AnnotationTable[key] * 100;
                    else
                        entryTable.Add(key, Annotator.AnnotationTable[key] == 0 ? 100 : 0);
                }

                foreach (var e in entryTable)
                {
                    var fileCoverage = fileHits.FirstOrDefault(x => x.Filename == e.Key);

                    if (e.Value != fileCoverage.Coverage)
                    {
                        throw new InvalidOperationException();
                    }
                }
            }

            return entryTable;
        }
    }
}
