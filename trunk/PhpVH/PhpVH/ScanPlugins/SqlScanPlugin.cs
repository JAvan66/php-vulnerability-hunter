using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;

namespace PhpVH.ScanPlugins
{
    public class SqlFunction
    {
        public string Name { get; set; }
        public int ParamCount { get; set; }
        public int QueryParam { get; set; }

        public SqlFunction(string name, int paramCount, int queryParam)
        {
            Name = name;
            ParamCount = paramCount;
            QueryParam = queryParam;
        }        
    }

    public static class SqlFunctionExtension
    {
        public static Hook[] ToHooks(this IEnumerable<SqlFunction> functions)
        {
            return functions.Select(x => new Hook(x.Name, x.ParamCount)).ToArray();
        }
    }

    public class SqlScanPlugin : ConfigurableScanPluginBase<SqlScanConfig>
    {
        public static readonly SqlFunction[] SqlFunctions = new[]
        {
            // MySQL
            new SqlFunction("mysql_query", 1, 0),
            new SqlFunction("mysql_query", 2, 0),

            new SqlFunction("mysql_unbuffered_query", 1, 0),
            new SqlFunction("mysql_unbuffered_query", 2, 0),            

            new SqlFunction("mysql_select_db", 1, 0),
            new SqlFunction("mysql_select_db", 2, 0),

            new SqlFunction("mysql_drop_db", 1, 0),
            new SqlFunction("mysql_drop_db", 2, 0),
            
            new SqlFunction("mysql_db_query", 2, 1),
            new SqlFunction("mysql_db_query", 3, 1),    
        
            

            // SQLite
            new SqlFunction("sqlite_query", 2, 1),
            new SqlFunction("sqlite_query", 3, 1),
            new SqlFunction("sqlite_query", 4, 1),

            new SqlFunction("sqlite_exec", 2, 1),
            new SqlFunction("sqlite_exec", 3, 1),

            new SqlFunction("sqlite_array_query", 2, 1),
            new SqlFunction("sqlite_array_query", 3, 1),
            new SqlFunction("sqlite_array_query", 4, 1),

            new SqlFunction("sqlite_unbuffered_query", 2, 1),
            new SqlFunction("sqlite_unbuffered_query", 3, 1),
            new SqlFunction("sqlite_unbuffered_query", 4, 1),
        };

        private static string[] _anchors = new[] { "testab", "testxy" };        

        //private readonly string[] _badStrings = new string[]
        //{
        //    //_anchor + @"';--"";--",
        //    //_anchor + @"\';--\"";--",
        //    //_anchor + @"\\';--\\"";--",
        //    //_anchor + @"\\\;--'\\\"";--",
        //    //_anchor + @"';#"";#",
        //    //_anchor + @"\';#\"";#",
        //    //_anchor + @"\\';#\\"";#",
        //    //_anchor + @"\\\;#'\\\"";#",

            
        //    _anchors[0] + @"'" + _anchors[1],
        //    _anchors[0] + @"\'" + _anchors[1],
        //    _anchors[0] + @"\\'" + _anchors[1],
        //    _anchors[0] + @"\\\'" + _anchors[1],

        //    _anchors[0] + @"""" + _anchors[1],
        //    _anchors[0] + @"\""" + _anchors[1],
        //    _anchors[0] + @"\\""" + _anchors[1],
        //    _anchors[0] + @"\\\""" + _anchors[1],
        //};

        public override int ModeCount
        {
            get { return Config.FuzzStrings.Length; }
        }

        private string _server;

        public override string Server
        {
            get { return _server; }
            set { _server = value; }
        }

        public SqlScanPlugin(string Server)
        {
            _server = Server;
        }

        protected override void InitializeCore()
        {
            Config.FuzzStrings = Config.FuzzStrings
                .Select(x => _anchors[0] + x + _anchors[1])
                .ToArray();
        }

        public override string BuildRequest(int Mode, string TargetFile, FileTrace SourceTrace)
        {
            return SourceTrace.Calls.CreateRequest(TargetFile, Server,
                Config.FuzzStrings[Mode], false, true, true);
        }

        private ScanAlert CreateAlert(FileTrace TargetTrace)
        {
            return new ScanAlert(ScanAlertOptions.Vulnerability,
                "SQL Injection", TargetTrace);
        }

        static bool IsSQLInjectable(string SQL)
        {
	        var strings = StringParser.GetStrings(SQL);
        	
	        foreach (var s in strings)
		        SQL = SQL.Replace(s, "");
        		
	        return SQL.Contains(_anchors[0]) || SQL.Contains(_anchors[1]);
        }

        public override ScanAlert ScanTrace(FileTrace TargetTrace)
        {
            var r = TargetTrace.Response.ToLower();

            //if (r.Contains("sql syntax"))
            //    return CreateAlert(TargetTrace);


            //else if (r.Contains("sql"))
            //    return new ScanAlert(ScanAlertOptions.Warning,
            //        "Potential SQL Error", TargetTrace);
            //else
            //    return null;

            //foreach (var call in TargetTrace.Calls.Where(x => x.Name == "mysql_query"))
            foreach (var call in TargetTrace.Calls
                .Where(x => SqlFunctions.Any(y => y.Name == x.Name)))
            {
                var func = SqlFunctions.SingleOrDefault(x => x.Name == call.Name &&
                    x.ParamCount == call.ParameterValues.Count);

                if (func == null)
                    continue;

                var value = call.ParameterValues[func.QueryParam];

                if (IsSQLInjectable(value))
                    return CreateAlert(TargetTrace);
            }

            return null;
        }

        public override string ToString()
        {
            return "SQL Injection Scan";
        }        
    }
}
