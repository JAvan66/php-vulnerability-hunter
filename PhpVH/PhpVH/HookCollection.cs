using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Components;
using PhpVH.LexicalAnalysis;
using PhpVH.CodeCoverage;

namespace PhpVH
{
    public class HookCollection : List<Hook>
    {
        

        public void CreateHandlerFile()
        {
            var hookFileText = new StringBuilder("<?php ");

            foreach (Hook h in this)
                hookFileText.AppendLine(h.ReplacementFunction);

            if (!Program.Config.HookSuperglobals)
            {
                hookFileText.AppendLine(Properties.Resources.PhpApiOverrides);
                hookFileText.AppendLine(Properties.Resources.SuperGlobalOverride);
            }

            if (Program.Config.DynamicScan)
                hookFileText.AppendLine(Properties.Resources.DynamicProbes);

            if (!Program.Config.CodeCoverageNone)
                hookFileText.AppendLine(Properties.Resources.Annotation);

            hookFileText.Append(" ?>");

            var hookFile = Program.Config.WebRoot + "\\" + Hook.HookFileName;
            try
            {
                File.WriteAllText(hookFile, hookFileText.ToString());
            }
            catch (UnauthorizedAccessException)
            {
                Cli.DisplayError(string.Format("\r\nError writing hook file to {0}", hookFile));

                if (!Program.Config.LauncherUsed)
                {
                    Cli.Pause();
                }
                Environment.Exit(3);
            }
            
        }

        public void DeleteHandlerFile()
        {
            File.Delete(Program.Config.WebRoot + "\\" + Hook.HookFileName);
        }        

        public void Set(DirectoryInfo Directory)
        {
            IEnumerable<FileInfo> files = null;
                
            try
            {
                files = Directory.GetFiles().Where(x =>
                    x.Extension.ToLower() == ".php" ||
                    x.Extension.ToLower() == ".inc");
            }
            catch (UnauthorizedAccessException)
            {
            	Cli.DisplayError(string.Format("\r\nError enumerating files in {0}",
                    Directory.FullName));
                return;
            }

            files.AsyncIter(f =>
            {
                var backup = Directory.GetFiles(f.Name + "b");

                try
                {
                    if (backup.Length != 0)
                        backup[0].CopyTo(f.FullName, true);
                    else
                        f.CopyTo(f.FullName + "b", true);
                }
                catch (UnauthorizedAccessException ex)
                {
                    TraceHelper.WriteLineFormat("\r\n\r\nError hooking file\r\n{0}\r\n",
                        ex.Message);

                    return;
                }

                string php = File.ReadAllText(f.FullName);

                Token[] tokens = null;

                Action getTokens = () => 
                    tokens = PhpParser.StripWhitespaceAndComments(new Lexer(php)
                        .GetTokens()
                        .ToArray());

                getTokens();

                lock (Program.PageFieldTable)
                {
                    if (!Program.PageFieldTable.ContainsKey(f.FullName))
                        Program.PageFieldTable.Add(f.FullName, new Dictionary<string, List<string>>());

                    var superglobals = StaticAnalyzer.FindSuperglobalFields(tokens);

                    foreach (var superglobal in superglobals)
                    {
                        if (!Program.PageFieldTable[f.FullName].ContainsKey(superglobal.Key))
                            Program.PageFieldTable[f.FullName].Add(superglobal.Key, new List<string>());

                        
                        var newValues = superglobal.Value
                            .Where(x => !Program.PageFieldTable[f.FullName][superglobal.Key].Contains(x));

                        Program.PageFieldTable[f.FullName][superglobal.Key].AddRange(newValues);
                    }
                }

                lock (Program.FileIncludeTable)
                    Program.FileIncludeTable.Add(f.FullName,
                        PhpParser.GetIncludedFiles(tokens));

                var functions = PhpParser.GetGlobalFunctionCalls(tokens);

                if (Program.Config.CodeCoverageReport > 0)
                {
                    php = ScanMetrics.Default.Annotator.AnnotateCode(f.FullName, php, tokens);                    
                }

                if (!Program.Config.HookSuperglobals)
                    php = PreloadHelper.Patch(php);

                foreach (Hook h in this)
                    h.Set(ref php);

                if (f.FullName.ToLower() == @"C:\tools\xampp\htdocs\thebuggenie\core\B2DB\Annotation.class.php".ToLower())
                    Console.Write("");

                getTokens();

                string include = "require_once('" +
                    Program.Config.WebRoot.Replace('\\', '/') + "/" + Hook.HookFileName + "');";
                    
                if (tokens.Length >= 2 &&
                    tokens[1].TokenType == TokenType.Keyword && 
                    tokens[1].Lexeme == "namespace")
                {
                    var eos = tokens.FirstOrDefault(x => x.TokenType == TokenType.EndOfStatement);

                    php = php.Insert(eos.Index + 1, "\r\n" + include + "\r\n");                        
                }
                else
                {
                    php = "<?php " + include + " ?>" + php;
                }

                try
                {
                    File.WriteAllText(f.FullName, php);
                }
                catch (UnauthorizedAccessException ex)
                {
                    TraceHelper.WriteLineFormat("\r\n\r\nError hooking file\r\n{0}\r\n",
                        ex.Message);

                    return;
                }


                TraceHelper.WriteFormat(".");
            });

            var subDirs = Directory.GetDirectories();

            foreach (DirectoryInfo d in subDirs)
                Set(d);            
        }

        public void Unset(DirectoryInfo Directory)
        {
            var files = Directory
                .GetFiles("*.*")
                .Where(x => x.Extension == ".php" || x.Extension == ".inc");

            foreach (FileInfo f in files)
            {
                try
                {
                    IOHelper.TryAction(() =>
                    {
                        var backup = Directory.GetFiles(f.Name + "b");

                        if (backup.Length != 0)
                        {
                            backup[0].CopyTo(f.FullName, true);
                            backup[0].Delete();
                        }
                    }, 512, 0);

                    TraceHelper.WriteFormat(".");                
                }
                catch (System.Exception ex)
                {
                    TraceHelper.WriteLineFormat("\r\nError unhooking {0}:\r\n{1}\r\n\r\n",
                        f.FullName, ex.Message);
                }                
            }

            foreach (DirectoryInfo d in Directory.GetDirectories())
                Unset(d);
        }
    }
}
