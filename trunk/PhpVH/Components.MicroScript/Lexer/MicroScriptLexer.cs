//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by llex.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 0162
using System;
using System.Collections.Generic;

namespace Components.MicroScript.Lexer
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("llex", "1")]
    public enum MicroScriptTokenType : short
    {
        None,
        AdditionOperator,
        Ampersand,
        AndOperator,
        AssignmentOperator,
        ColonOperator,
        Comma,
        Comment,
        ComplementOperator,
        ConcatEqualOperator,
        DecrementOperator,
        DivisionEqualOperator,
        DivisionOperator,
        elseKeyword,
        EndOfFile,
        EqualityOperator,
        falseKeyword,
        forKeyword,
        funKeyword,
        GreaterThanOperator,
        GreaterThanOrEqualOperator,
        HexNumber,
        Identifier,
        ifKeyword,
        IncrementOperator,
        inKeyword,
        LeftBrace,
        LeftBracket,
        LeftParenthesis,
        LessThanOperator,
        LessThanOrEqualOperator,
        LoadLibraryOperator,
        LoadScriptOperator,
        MemberOperator,
        MinusEqualOperator,
        MinusOperator,
        ModulusEqualOperator,
        ModulusOperator,
        MultiplicationEqualOperator,
        MultiplicationOperator,
        NotEqualOperator,
        NotOperator,
        Number,
        OrEqualOperator,
        OrOperator,
        PlusEqualOperator,
        retKeyword,
        RightBrace,
        RightBracket,
        RightParenthesis,
        ShiftLeft,
        ShiftRight,
        String,
        trueKeyword,
        Unknown,
        WhiteSpace,
        XorEqualOperator,
        XorOperator
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("llex", "1")]
    public struct MicroScriptToken
    {
        public MicroScriptTokenType TokenType;
        public string Lexeme;
        public int Index;

        public MicroScriptToken(MicroScriptTokenType tokenType, string lexeme, int index)
        {
            TokenType = tokenType;
            Lexeme = lexeme;
            Index = index;
        }

        public override string ToString()
        {
            return string.Format("[{0}] {1}: {2}", Index, TokenType, Lexeme);
        }

        public bool IsKeyword()
        {
            return TokenType == MicroScriptTokenType.trueKeyword ||
TokenType == MicroScriptTokenType.falseKeyword ||
TokenType == MicroScriptTokenType.ifKeyword ||
TokenType == MicroScriptTokenType.elseKeyword ||
TokenType == MicroScriptTokenType.forKeyword ||
TokenType == MicroScriptTokenType.inKeyword ||
TokenType == MicroScriptTokenType.retKeyword;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("llex", "1")]
    public class MicroScriptLexer
    {
        private string text = "";

        public string Text
        {
            get { return text; }
            set
            {
                text = value;
                lastIndex = text.Length - 1;
            }
        }

        int lastIndex = -1;

        int charIndex = -1;

        int mode = 0;

        int state = 0;

        char currentChar = (char)0;

        public MicroScriptLexer()
        {
        }

        public MicroScriptLexer(string text)
        {
            Text = text;
        }

        bool NextChar()
        {
            if (charIndex < lastIndex)
            {
                currentChar = text[++charIndex];
                return true;
            }

            return false;
        }

        private MicroScriptTokenType GetToken()
        {

            if (mode == 0)
            {
                if (charIndex < lastIndex)
                {
                    currentChar = text[++charIndex];

                    switch (currentChar)
                    {
                        case '#':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '#':

                                        return MicroScriptTokenType.LoadLibraryOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.LoadScriptOperator;

                        case '&':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '&':

                                        return MicroScriptTokenType.AndOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.Ampersand;

                        case ',':

                            return MicroScriptTokenType.Comma;

                        case ':':

                            return MicroScriptTokenType.ColonOperator;

                        case '@':

                            return MicroScriptTokenType.funKeyword;

                        case '(':

                            return MicroScriptTokenType.LeftParenthesis;

                        case ')':

                            return MicroScriptTokenType.RightParenthesis;

                        case '[':

                            return MicroScriptTokenType.LeftBracket;

                        case ']':

                            return MicroScriptTokenType.RightBracket;

                        case '{':

                            return MicroScriptTokenType.LeftBrace;

                        case '}':

                            return MicroScriptTokenType.RightBrace;

                        case '-':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.MinusEqualOperator;

                                    case '-':

                                        return MicroScriptTokenType.DecrementOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.MinusOperator;

                        case '=':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.EqualityOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.AssignmentOperator;

                        case '+':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.PlusEqualOperator;

                                    case '+':

                                        return MicroScriptTokenType.IncrementOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.AdditionOperator;

                        case '*':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.MultiplicationEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.MultiplicationOperator;

                        case '/':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.DivisionEqualOperator;

                                    case '/':

                                        state = 0;
                                        while (NextChar())
                                        {
                                            if (currentChar == '\r' || currentChar == '\n')
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Comment;
                                            }
                                            else if (currentChar == '?')
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1 && currentChar == '>')
                                            {
                                                charIndex -= 2;
                                                return MicroScriptTokenType.Comment;
                                            }
                                            else
                                            {
                                                state = 0;
                                            }
                                        }
                                        return MicroScriptTokenType.Comment;

                                        break;

                                    case '*':

                                        state = 0;
                                        while (NextChar())
                                        {
                                            if ((state == 0 || state == 1) && currentChar == '*')
                                                state = 1;
                                            else if (state == 1 && currentChar == '/')
                                                return MicroScriptTokenType.Comment;
                                            else
                                                state = 0;
                                        }
                                        return MicroScriptTokenType.Comment;

                                        break;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.DivisionOperator;

                        case '%':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.ModulusEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.ModulusOperator;

                        case '.':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.ConcatEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.MemberOperator;

                        case '|':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.OrEqualOperator;

                                    case '|':

                                        return MicroScriptTokenType.OrOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.OrOperator;

                        case '^':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.XorEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.XorOperator;

                        case '~':

                            return MicroScriptTokenType.ComplementOperator;

                        case '<':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '<':

                                        return MicroScriptTokenType.ShiftLeft;

                                    case '>':

                                        return MicroScriptTokenType.NotEqualOperator;

                                    case '=':

                                        return MicroScriptTokenType.LessThanOrEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.LessThanOperator;

                        case '>':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '>':

                                        return MicroScriptTokenType.ShiftRight;

                                    case '=':

                                        return MicroScriptTokenType.GreaterThanOrEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.GreaterThanOperator;

                        case '!':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '=':

                                        return MicroScriptTokenType.NotEqualOperator;

                                }

                                charIndex--;
                            }
                            return MicroScriptTokenType.NotOperator;

                        case '\x0d':

                            return MicroScriptTokenType.WhiteSpace;

                        case '\x0a':

                            return MicroScriptTokenType.WhiteSpace;

                        case '\x09':

                            return MicroScriptTokenType.WhiteSpace;

                        case '\x0b':

                            return MicroScriptTokenType.WhiteSpace;

                        case ' ':

                            return MicroScriptTokenType.WhiteSpace;

                        case '0':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case 'x':

                                        currentChar = text[++charIndex];
                                        state = 0;
                                        do
                                        {
                                            if ((state == 0 || state == 1) &&
                                            ((currentChar > 47 && currentChar < 58) ||
                                            (64 < currentChar && currentChar < 71) ||
                                            (96 < currentChar && currentChar < 103)))
                                                state = 1;
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.HexNumber;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Unknown;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                }

                                charIndex--;
                            }
                            state = 0;
                            do
                            {
                                if ((state == 0 || state == 1) && currentChar > 47 && currentChar < 58)
                                    state = 1;
                                else if (state == 1 && currentChar == '.')
                                    state = 2;
                                else if (state == 2 || state == 3 && currentChar > 47 && currentChar < 58)
                                    state = 3;
                                else if ((state == 1 || state == 3) && (currentChar == 'E' || currentChar == 'e'))
                                {
                                    state = 4;
                                }
                                else if (state == 4 && (currentChar == '-' || currentChar == '+'))
                                {
                                    state = 6;
                                }
                                else if (state == 4 && currentChar > 47 && currentChar < 58)
                                {
                                    state = 5;
                                }
                                else if (state == 5 && currentChar > 47 && currentChar < 58)
                                {
                                    continue;
                                }
                                else if (state == 6)
                                {
                                    if (currentChar > 47 && currentChar < 58)
                                    {
                                        state = 5;
                                        continue;
                                    }
                                    else
                                    {
                                        return MicroScriptTokenType.Unknown;
                                    }
                                }
                                else if (state == 1 || state == 3 || state == 5)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Number;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            while (NextChar());
                            return MicroScriptTokenType.Number;

                            break;

                        case '"':

                            bool escaped = false;
                            while (NextChar())
                            {
                                if (!escaped && currentChar == '"')
                                    return MicroScriptTokenType.String;
                                escaped = !escaped && currentChar == '\\';
                            }
                            return MicroScriptTokenType.String;

                            break;

                        case '\'':

                            escaped = false;
                            while (NextChar())
                            {
                                if (!escaped && currentChar == '\'')
                                    return MicroScriptTokenType.String;
                                escaped = !escaped && currentChar == '\\';
                            }
                            return MicroScriptTokenType.String;

                            break;

                        case 't':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case 'r':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case 'u':
                                                    if (charIndex < lastIndex)
                                                    {
                                                        currentChar = text[++charIndex];

                                                        switch (currentChar)
                                                        {
                                                            case 'e':

                                                                NextChar();
                                                                state = 0;
                                                                do
                                                                {
                                                                    if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                                                    (currentChar >= '0' && currentChar <= '9') ||
                                                                    currentChar == '_' ||
                                                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                                    {
                                                                        state = 1;
                                                                    }
                                                                    else if (state == 1)
                                                                    {
                                                                        charIndex--;
                                                                        return MicroScriptTokenType.Identifier;
                                                                    }
                                                                    else
                                                                    {
                                                                        charIndex--;
                                                                        return MicroScriptTokenType.trueKeyword;
                                                                    }
                                                                }
                                                                while (NextChar());

                                                                break;

                                                        }

                                                        charIndex--;
                                                    }
                                                    NextChar();
                                                    state = 0;
                                                    do
                                                    {
                                                        if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                        (currentChar >= 'A' && currentChar <= 'Z') ||
                                                        (currentChar >= '0' && currentChar <= '9') ||
                                                        currentChar == '_' ||
                                                        (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                        {
                                                            state = 1;
                                                        }
                                                        else if (state == 1)
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                        else
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                    }
                                                    while (NextChar());

                                                    break;

                                            }

                                            charIndex--;
                                        }
                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                }

                                charIndex--;
                            }
                            NextChar();
                            state = 0;
                            do
                            {
                                if (((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                (currentChar >= '0' && currentChar <= '9') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                {
                                    state = 1;
                                }
                                else if (state == 1)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                                else
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                            }
                            while (NextChar());

                            break;

                        case 'f':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case 'a':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case 'l':
                                                    if (charIndex < lastIndex)
                                                    {
                                                        currentChar = text[++charIndex];

                                                        switch (currentChar)
                                                        {
                                                            case 's':
                                                                if (charIndex < lastIndex)
                                                                {
                                                                    currentChar = text[++charIndex];

                                                                    switch (currentChar)
                                                                    {
                                                                        case 'e':

                                                                            NextChar();
                                                                            state = 0;
                                                                            do
                                                                            {
                                                                                if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                                                                (currentChar >= '0' && currentChar <= '9') ||
                                                                                currentChar == '_' ||
                                                                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                                                {
                                                                                    state = 1;
                                                                                }
                                                                                else if (state == 1)
                                                                                {
                                                                                    charIndex--;
                                                                                    return MicroScriptTokenType.Identifier;
                                                                                }
                                                                                else
                                                                                {
                                                                                    charIndex--;
                                                                                    return MicroScriptTokenType.falseKeyword;
                                                                                }
                                                                            }
                                                                            while (NextChar());

                                                                            break;

                                                                    }

                                                                    charIndex--;
                                                                }
                                                                NextChar();
                                                                state = 0;
                                                                do
                                                                {
                                                                    if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                                                    (currentChar >= '0' && currentChar <= '9') ||
                                                                    currentChar == '_' ||
                                                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                                    {
                                                                        state = 1;
                                                                    }
                                                                    else if (state == 1)
                                                                    {
                                                                        charIndex--;
                                                                        return MicroScriptTokenType.Identifier;
                                                                    }
                                                                    else
                                                                    {
                                                                        charIndex--;
                                                                        return MicroScriptTokenType.Identifier;
                                                                    }
                                                                }
                                                                while (NextChar());

                                                                break;

                                                        }

                                                        charIndex--;
                                                    }
                                                    NextChar();
                                                    state = 0;
                                                    do
                                                    {
                                                        if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                        (currentChar >= 'A' && currentChar <= 'Z') ||
                                                        (currentChar >= '0' && currentChar <= '9') ||
                                                        currentChar == '_' ||
                                                        (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                        {
                                                            state = 1;
                                                        }
                                                        else if (state == 1)
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                        else
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                    }
                                                    while (NextChar());

                                                    break;

                                            }

                                            charIndex--;
                                        }
                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                    case 'o':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case 'r':

                                                    NextChar();
                                                    state = 0;
                                                    do
                                                    {
                                                        if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                        (currentChar >= 'A' && currentChar <= 'Z') ||
                                                        (currentChar >= '0' && currentChar <= '9') ||
                                                        currentChar == '_' ||
                                                        (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                        {
                                                            state = 1;
                                                        }
                                                        else if (state == 1)
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                        else
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.forKeyword;
                                                        }
                                                    }
                                                    while (NextChar());

                                                    break;

                                            }

                                            charIndex--;
                                        }
                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                }

                                charIndex--;
                            }
                            NextChar();
                            state = 0;
                            do
                            {
                                if (((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                (currentChar >= '0' && currentChar <= '9') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                {
                                    state = 1;
                                }
                                else if (state == 1)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                                else
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                            }
                            while (NextChar());

                            break;

                        case 'i':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case 'f':

                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.ifKeyword;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                    case 'n':

                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.inKeyword;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                }

                                charIndex--;
                            }
                            NextChar();
                            state = 0;
                            do
                            {
                                if (((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                (currentChar >= '0' && currentChar <= '9') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                {
                                    state = 1;
                                }
                                else if (state == 1)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                                else
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                            }
                            while (NextChar());

                            break;

                        case 'e':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case 'l':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case 's':
                                                    if (charIndex < lastIndex)
                                                    {
                                                        currentChar = text[++charIndex];

                                                        switch (currentChar)
                                                        {
                                                            case 'e':

                                                                NextChar();
                                                                state = 0;
                                                                do
                                                                {
                                                                    if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                                                    (currentChar >= '0' && currentChar <= '9') ||
                                                                    currentChar == '_' ||
                                                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                                    {
                                                                        state = 1;
                                                                    }
                                                                    else if (state == 1)
                                                                    {
                                                                        charIndex--;
                                                                        return MicroScriptTokenType.Identifier;
                                                                    }
                                                                    else
                                                                    {
                                                                        charIndex--;
                                                                        return MicroScriptTokenType.elseKeyword;
                                                                    }
                                                                }
                                                                while (NextChar());

                                                                break;

                                                        }

                                                        charIndex--;
                                                    }
                                                    NextChar();
                                                    state = 0;
                                                    do
                                                    {
                                                        if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                        (currentChar >= 'A' && currentChar <= 'Z') ||
                                                        (currentChar >= '0' && currentChar <= '9') ||
                                                        currentChar == '_' ||
                                                        (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                        {
                                                            state = 1;
                                                        }
                                                        else if (state == 1)
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                        else
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                    }
                                                    while (NextChar());

                                                    break;

                                            }

                                            charIndex--;
                                        }
                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                }

                                charIndex--;
                            }
                            NextChar();
                            state = 0;
                            do
                            {
                                if (((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                (currentChar >= '0' && currentChar <= '9') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                {
                                    state = 1;
                                }
                                else if (state == 1)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                                else
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                            }
                            while (NextChar());

                            break;

                        case 'r':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case 'e':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case 't':

                                                    NextChar();
                                                    state = 0;
                                                    do
                                                    {
                                                        if (((currentChar >= 'a' && currentChar <= 'z') ||
                                                        (currentChar >= 'A' && currentChar <= 'Z') ||
                                                        (currentChar >= '0' && currentChar <= '9') ||
                                                        currentChar == '_' ||
                                                        (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                        {
                                                            state = 1;
                                                        }
                                                        else if (state == 1)
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.Identifier;
                                                        }
                                                        else
                                                        {
                                                            charIndex--;
                                                            return MicroScriptTokenType.retKeyword;
                                                        }
                                                    }
                                                    while (NextChar());

                                                    break;

                                            }

                                            charIndex--;
                                        }
                                        NextChar();
                                        state = 0;
                                        do
                                        {
                                            if (((currentChar >= 'a' && currentChar <= 'z') ||
                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                            (currentChar >= '0' && currentChar <= '9') ||
                                            currentChar == '_' ||
                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                            {
                                                state = 1;
                                            }
                                            else if (state == 1)
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                            else
                                            {
                                                charIndex--;
                                                return MicroScriptTokenType.Identifier;
                                            }
                                        }
                                        while (NextChar());

                                        break;

                                }

                                charIndex--;
                            }
                            NextChar();
                            state = 0;
                            do
                            {
                                if (((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                (currentChar >= '0' && currentChar <= '9') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                {
                                    state = 1;
                                }
                                else if (state == 1)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                                else
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                            }
                            while (NextChar());

                            break;

                        default:
                            state = 0;
                            do
                            {
                                if (state == 0 &&
                                ((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                    state = 1;
                                else if (state == 1 &&
                                ((currentChar >= 'a' && currentChar <= 'z') ||
                                (currentChar >= 'A' && currentChar <= 'Z') ||
                                (currentChar >= '0' && currentChar <= '9') ||
                                currentChar == '_' ||
                                (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                    state = 1;
                                else if (state == 1 || state == 2)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Identifier;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            while (NextChar());

                            state = 0;
                            do
                            {
                                if ((state == 0 || state == 1) && currentChar > 47 && currentChar < 58)
                                    state = 1;
                                else if (state == 1 && currentChar == '.')
                                    state = 2;
                                else if (state == 2 || state == 3 && currentChar > 47 && currentChar < 58)
                                    state = 3;
                                else if ((state == 1 || state == 3) && (currentChar == 'E' || currentChar == 'e'))
                                {
                                    state = 4;
                                }
                                else if (state == 4 && (currentChar == '-' || currentChar == '+'))
                                {
                                    state = 6;
                                }
                                else if (state == 4 && currentChar > 47 && currentChar < 58)
                                {
                                    state = 5;
                                }
                                else if (state == 5 && currentChar > 47 && currentChar < 58)
                                {
                                    continue;
                                }
                                else if (state == 6)
                                {
                                    if (currentChar > 47 && currentChar < 58)
                                    {
                                        state = 5;
                                        continue;
                                    }
                                    else
                                    {
                                        return MicroScriptTokenType.Unknown;
                                    }
                                }
                                else if (state == 1 || state == 3 || state == 5)
                                {
                                    charIndex--;
                                    return MicroScriptTokenType.Number;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            while (NextChar());

                            break;

                    }

                    return MicroScriptTokenType.Unknown;
                }
            }


            return MicroScriptTokenType.EndOfFile;
        }

        public List<MicroScriptToken> GetTokens()
        {
            charIndex = -1;

            MicroScriptTokenType tokenType;

            int lastIndex = -1;

            var tokens = new List<MicroScriptToken>();

            while ((tokenType = GetToken()) != MicroScriptTokenType.EndOfFile)
            {
                var index = lastIndex + 1;
                var lexeme = text.Substring(index, charIndex - lastIndex);

                tokens.Add(new MicroScriptToken(tokenType, lexeme, index));

                lastIndex = charIndex;
            }

            return tokens;
        }
    }
}
#pragma warning restore 0162