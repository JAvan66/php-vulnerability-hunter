//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhpVH.Tests.Unit.LexicalAnalysis
{
    using System;


    [NUnit.Framework.TestFixtureAttribute()]
    public partial class LexerTest
    {

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.CategoryAttribute("PhpLexer")]
        public virtual void OperatorAndKeywordTests()
        {
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.Ampersand, "&");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.Comma, ",");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ScopeResolutionOperator, "::");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ObjectOperator, "->");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.Namespace, "\\");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ErrorSuppressor, "@");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.LeftParenthesis, "(");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.RightParenthesis, ")");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.LeftBracket, "[");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.RightBracket, "]");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.LeftBrace, "{");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.RightBrace, "}");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.AssignmentOperator, "=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.PlusEqualOperator, "+=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.MinusEqualOperator, "-=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.MultiplicationEqualOperator, "*=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.DivisionEqualOperator, "/=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ModulusEqualOperator, "%=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ConcatEqualOperator, ".=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.OrEqualOperator, "|=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.XorEqualOperator, "^=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.AdditionOperator, "+");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.SubtractionOperator, "-");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.MultiplicationOperator, "*");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.DivisionOperator, "/");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ModulusOperator, "%");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.IncrementOperator, "++");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.DecrementOperator, "--");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.OrOperator, "|");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.XorOperator, "^");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ComplementOperator, "~");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ShiftLeft, "<<");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ShiftRight, ">>");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.StringConcatOperator, ".");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.NotOperator, "!");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.AndOperator, "&&");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.OrOperator, "||");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.EqualityOperator, "==");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.IdenticalOperator, "===");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.NotEqualOperator, "!=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.NotEqualOperator, "<>");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.NotIdenticalOperator, "!==");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.LessThanOperator, "<");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.GreaterThanOperator, ">");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.LessThanOrEqualOperator, "<=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.GreaterThanOrEqualOperator, ">=");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.TernaryOperator, "?");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.TernaryOperator, ":");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.EndOfStatement, ";");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.WhiteSpace, "\r");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.WhiteSpace, "\n");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.WhiteSpace, "\t");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.WhiteSpace, "");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.WhiteSpace, " ");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.abstractKeyword, "abstract");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.andKeyword, "and");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.arrayKeyword, "array");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.asKeyword, "as");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.breakKeyword, "break");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.caseKeyword, "case");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.catchKeyword, "catch");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.cfunctionKeyword, "cfunction");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.classKeyword, "class");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.cloneKeyword, "clone");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.constKeyword, "const");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.continueKeyword, "continue");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.declareKeyword, "declare");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.defaultKeyword, "default");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.doKeyword, "do");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.elseKeyword, "else");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.elseifKeyword, "elseif");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.enddeclareKeyword, "enddeclare");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.endforKeyword, "endfor");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.endforeachKeyword, "endforeach");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.endifKeyword, "endif");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.endswitchKeyword, "endswitch");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.endwhileKeyword, "endwhile");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.extendsKeyword, "extends");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.finalKeyword, "final");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.forKeyword, "for");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.foreachKeyword, "foreach");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.functionKeyword, "function");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.globalKeyword, "global");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.gotoKeyword, "goto");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.ifKeyword, "if");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.implementsKeyword, "implements");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.interfaceKeyword, "interface");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.instanceofKeyword, "instanceof");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.namespaceKeyword, "namespace");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.newKeyword, "new");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.old_functionKeyword, "old_function");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.orKeyword, "or");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.privateKeyword, "private");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.protectedKeyword, "protected");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.publicKeyword, "public");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.staticKeyword, "static");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.switchKeyword, "switch");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.throwKeyword, "throw");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.tryKeyword, "try");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.useKeyword, "use");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.varKeyword, "var");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.whileKeyword, "while");
            PhpVH.Tests.Unit.LexicalAnalysis.TokenAssert.IsValid(PhpVH.LexicalAnalysis.TokenType.xorKeyword, "xor");
        }
    }
}
