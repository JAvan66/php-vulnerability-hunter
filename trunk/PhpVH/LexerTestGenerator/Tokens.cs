using PhpVH.LexicalAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LexerTestGenerator
{
    public static class Tokens
    {
        public static Tuple<TokenType, string>[] GetTokens()
        {
            return new[]
            {
                Tuple.Create(TokenType.Ampersand,"&"),
                Tuple.Create(TokenType.Comma,","),
                Tuple.Create(TokenType.ScopeResolutionOperator,"::"),
                Tuple.Create(TokenType.ObjectOperator,"->"),
                Tuple.Create(TokenType.Namespace,"\\"),
                Tuple.Create(TokenType.ErrorSuppressor,"@"),
                Tuple.Create(TokenType.LeftParenthesis,"("),
                Tuple.Create(TokenType.RightParenthesis,")"),
                Tuple.Create(TokenType.LeftBracket,"["),
                Tuple.Create(TokenType.RightBracket,"]"),
                Tuple.Create(TokenType.LeftBrace,"{"),
                Tuple.Create(TokenType.RightBrace,"}"),
                Tuple.Create(TokenType.AssignmentOperator,"="),
                Tuple.Create(TokenType.PlusEqualOperator,"+="),
                Tuple.Create(TokenType.MinusEqualOperator,"-="),
                Tuple.Create(TokenType.MultiplicationEqualOperator,"*="),
                Tuple.Create(TokenType.DivisionEqualOperator,"/="),
                Tuple.Create(TokenType.ModulusEqualOperator,"%="),
                Tuple.Create(TokenType.ConcatEqualOperator,".="),
                Tuple.Create(TokenType.OrEqualOperator,"|="),
                Tuple.Create(TokenType.XorEqualOperator,"^="),
                Tuple.Create(TokenType.AdditionOperator,"+"),
                Tuple.Create(TokenType.MultiplicationOperator,"*"),
                Tuple.Create(TokenType.DivisionOperator,"/"),
                Tuple.Create(TokenType.ModulusOperator,"%"),
                Tuple.Create(TokenType.IncrementOperator,"++"),
                Tuple.Create(TokenType.DecrementOperator,"--"),
                Tuple.Create(TokenType.OrOperator,"|"),
                Tuple.Create(TokenType.XorOperator,"^"),
                Tuple.Create(TokenType.ComplementOperator,"~"),
                Tuple.Create(TokenType.ShiftLeft,"<<"),
                Tuple.Create(TokenType.ShiftRight,">>"),
                Tuple.Create(TokenType.StringConcatOperator,"."),
                Tuple.Create(TokenType.NotOperator,"!"),
                Tuple.Create(TokenType.AndOperator,"&&"),
                Tuple.Create(TokenType.OrOperator,"||"),
                Tuple.Create(TokenType.EqualityOperator,"=="),
                Tuple.Create(TokenType.IdenticalOperator,"==="),
                Tuple.Create(TokenType.NotEqualOperator,"!="),
                Tuple.Create(TokenType.NotEqualOperator,"<>"),
                Tuple.Create(TokenType.NotIdenticalOperator,"!=="),
                Tuple.Create(TokenType.LessThanOperator,"<"),
                Tuple.Create(TokenType.GreaterThanOperator,">"),
                Tuple.Create(TokenType.LessThanOrEqualOperator,"<="),
                Tuple.Create(TokenType.GreaterThanOrEqualOperator,">="),
                Tuple.Create(TokenType.TernaryOperator,"?"),
                Tuple.Create(TokenType.TernaryOperator,":"),
                Tuple.Create(TokenType.EndOfStatement,";"),
                Tuple.Create(TokenType.WhiteSpace,"\x0D"),
                Tuple.Create(TokenType.WhiteSpace,"\x0A"),
                Tuple.Create(TokenType.WhiteSpace,"\x09"),
                Tuple.Create(TokenType.WhiteSpace,"\x0B"),
                Tuple.Create(TokenType.WhiteSpace,"\x20"),
                Tuple.Create(TokenType.abstractKeyword,"abstract"),
                Tuple.Create(TokenType.andKeyword,"and"),
                Tuple.Create(TokenType.arrayKeyword,"array"),
                Tuple.Create(TokenType.asKeyword,"as"),
                Tuple.Create(TokenType.breakKeyword,"break"),
                Tuple.Create(TokenType.caseKeyword,"case"),
                Tuple.Create(TokenType.catchKeyword,"catch"),
                Tuple.Create(TokenType.cfunctionKeyword,"cfunction"),
                Tuple.Create(TokenType.classKeyword,"class"),
                Tuple.Create(TokenType.cloneKeyword,"clone"),
                Tuple.Create(TokenType.constKeyword,"const"),
                Tuple.Create(TokenType.continueKeyword,"continue"),
                Tuple.Create(TokenType.declareKeyword,"declare"),
                Tuple.Create(TokenType.defaultKeyword,"default"),
                Tuple.Create(TokenType.doKeyword,"do"),
                Tuple.Create(TokenType.elseKeyword,"else"),
                Tuple.Create(TokenType.elseifKeyword,"elseif"),
                Tuple.Create(TokenType.enddeclareKeyword,"enddeclare"),
                Tuple.Create(TokenType.endforKeyword,"endfor"),
                Tuple.Create(TokenType.endforeachKeyword,"endforeach"),
                Tuple.Create(TokenType.endifKeyword,"endif"),
                Tuple.Create(TokenType.endswitchKeyword,"endswitch"),
                Tuple.Create(TokenType.endwhileKeyword,"endwhile"),
                Tuple.Create(TokenType.extendsKeyword,"extends"),
                Tuple.Create(TokenType.finalKeyword,"final"),
                Tuple.Create(TokenType.forKeyword,"for"),
                Tuple.Create(TokenType.foreachKeyword,"foreach"),
                Tuple.Create(TokenType.functionKeyword,"function"),
                Tuple.Create(TokenType.globalKeyword,"global"),
                Tuple.Create(TokenType.gotoKeyword,"goto"),
                Tuple.Create(TokenType.ifKeyword,"if"),
                Tuple.Create(TokenType.implementsKeyword,"implements"),
                Tuple.Create(TokenType.interfaceKeyword,"interface"),
                Tuple.Create(TokenType.instanceofKeyword,"instanceof"),
                Tuple.Create(TokenType.namespaceKeyword,"namespace"),
                Tuple.Create(TokenType.newKeyword,"new"),
                Tuple.Create(TokenType.old_functionKeyword,"old_function"),
                Tuple.Create(TokenType.orKeyword,"or"),
                Tuple.Create(TokenType.privateKeyword,"private"),
                Tuple.Create(TokenType.protectedKeyword,"protected"),
                Tuple.Create(TokenType.publicKeyword,"public"),
                Tuple.Create(TokenType.staticKeyword,"static"),
                Tuple.Create(TokenType.switchKeyword,"switch"),
                Tuple.Create(TokenType.throwKeyword,"throw"),
                Tuple.Create(TokenType.tryKeyword,"try"),
                Tuple.Create(TokenType.useKeyword,"use"),
                Tuple.Create(TokenType.varKeyword,"var"),
                Tuple.Create(TokenType.whileKeyword,"while"),
                Tuple.Create(TokenType.xorKeyword,"xor"),
            };
        }
    }
}
