using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Components;
using System.IO;
using Components.ConsolePlus;

namespace PhpVH.CodeCoverage
{
    public class CoverageCommenter
    {
        private PluginAnnotationTable _table;

        public CoverageCommenter(PluginAnnotationTable table)
        {
            _table = table;
        }

        public void LoadTable(string file)
        {
            _table = PluginAnnotationTable.Load(file);
        }

        public static string GetCommentedFilePath(string outputFolder, string pluginName)
        {
            return outputFolder + "\\Coverage Comments\\" + PathHelper.SanitizePath(pluginName);
        }

        public void WriteCommentedFiles(string outputFolder)
        {
            _table.Items.Iter(x =>
            {
                Cli.WriteLine("Writing coverage comments for ~Cyan~{0}~R~", x.Plugin);

                var dir = GetCommentedFilePath(outputFolder, x.Plugin);

                Directory.CreateDirectory(dir);

                x.Items.Iter(y =>
                {
                    var code = File.ReadAllText(y.Filename + "b");

                    var commentedCode = y.Items
                        .OrderByDescending(z => z.Index)
                        .Select(z => new
                        {
                            Index = z.Index,
                            Comment = string.Format(
                                "\r\n/*\r\n{0}\r\nhit count: {1}\r\n{0}\r\n*/\r\n",
                                new string('-', 32),
                                z.HitCount)
                        })
                        .Where(z => z.Index < code.Length)
                        .Aggregate(
                            new StringBuilder(code),
                            (sb, z) => sb.Insert(z.Index, z.Comment))
                        .ToString();

                    var l = Program.Config.WebRoot.Length;

                    Cli.WriteLine("[~Green~+~R~] {0}", y.Filename.Substring(l + 1));

                    var name = dir + "\\" + PathHelper.SanitizePath(y.Filename, '$');

                    File.WriteAllText(name, commentedCode);
                });

                Cli.WriteLine();
            });
        }
    }
}
