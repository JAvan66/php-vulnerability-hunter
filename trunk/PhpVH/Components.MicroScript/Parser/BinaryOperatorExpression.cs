using System;
using System.Collections.Generic;
using Components.MicroScript;
using Components.MicroScript.Lexer;

namespace Components.MicroScript.Parser
{
    public class BinaryOperatorExpression : Expression
    {
        private Dictionary<MicroScriptTokenType, string> _opTable = new Dictionary<MicroScriptTokenType, string>
        {
            { MicroScriptTokenType.AdditionOperator, "+" },
            { MicroScriptTokenType.AndOperator, "&" },
            { MicroScriptTokenType.AssignmentOperator, "=" },
            { MicroScriptTokenType.MultiplicationOperator, "*" },
            { MicroScriptTokenType.DivisionOperator, "/" },
            { MicroScriptTokenType.EqualityOperator, "==" },
            { MicroScriptTokenType.GreaterThanOperator, "<" },
            { MicroScriptTokenType.MemberOperator, "." },
            { MicroScriptTokenType.ColonOperator, ":" },
        };

        public MicroScriptTokenType Operator { get; set; }

        public Expression LeftOperand { get; set; }
        
        public Expression RightOperand { get; set; }

        public BinaryOperatorExpression(Expression left, MicroScriptTokenType operatorType, Expression right)
        {
            LeftOperand = left;
            Operator = operatorType;
            RightOperand = right;
        }

        public override string ToString()
        {
            var op = _opTable.ContainsKey(Operator) ? _opTable[Operator] : "[Unknown Op]";
            return string.Format("({0} {1} {2})", LeftOperand, op, RightOperand);
        }
    }
}

