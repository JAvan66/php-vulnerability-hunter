using Components.Aphid.Interpreter;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Components.Aphid.Tests.Integration
{
    [TestFixture]
    public class Tests
    {
        private AphidObject Execute(string script)
        {
            var interpreter = new AphidInterpreter();
            interpreter.Interpret(script);
            return interpreter.GetReturnValue();
        }

        private void AssertEquals(object expected, string script)
        {
            Assert.AreEqual(expected, Execute(script).Value);
        }

        private void AssertFoo(string script)
        {
            AssertEquals("foo", script);
        }

        [Test]
        public void PropertyGetTest()
        {
            AssertFoo("x={y:'foo'}; ret x.y;");
        }

        [Test]
        public void PropertyGetTest2()
        {
            AssertFoo("x={y:{z:{a:{b:{c:'foo'}}}}}; ret x.y.z.a.b.c;");
        }

        [Test]
        public void PropertySetTest()
        {
            AssertFoo("x={}; x.y='foo'; ret x.y;");
        }

        [Test]
        public void PropertySetTest2()
        {
            AssertFoo("x={y:'bar'}; x.y='foo'; ret x.y;");
        }

        [Test]
        public void PropertySetTest3()
        {
            AssertFoo("x={y:{z:{}}}; x.y.z.a='foo'; ret x.y.z.a;");
        }

        [Test]
        public void AssignmentTest()
        {
            AssertFoo("x='foo'; ret x;");
        }

        [Test]
        public void AssignmentTest2()
        {
            AssertFoo("x='bar'; x='foo'; ret x;");
        }

        [Test]
        public void FunctionTest()
        {
            AssertEquals(9m, "sqr=@(x){ret x*x;}; ret sqr(3);");
        }

        [Test]
        public void SingleLineFunctionTest()
        {
            AssertEquals(9m, "sqr=@(x)x*x; ret sqr(3);");
        }

        [Test]
        public void StringConcatTest()
        {
            AssertFoo("ret 'fo'+'o';");
        }

        [Test]
        public void AdditionTest()
        {
            AssertEquals(9m, "ret 2+7;");
        }

        [Test]
        public void SubtractionTest()
        {
            AssertEquals(9m, "ret 11-2;");
        }

        [Test]
        public void MultiplicationTest()
        {
            AssertEquals(20m, "ret 10*2;");
        }

        [Test]
        public void OrderOfOperationsTest()
        {
            AssertEquals(7m, "ret 1+2*3;");
        }

        [Test]
        public void OrderOfOperationsTest2()
        {
            AssertEquals(9m, "ret (1+2)*3;");
        }

        [Test]
        public void OrderOfOperationsTest3()
        {
            AssertEquals(9m, "x={y:{a:1+2,b:3}}; ret x.y.a*x.y.b;");
        }

        [Test]
        public void ClosureGetTest()
        {
            AssertFoo("x='foo'; test=@(){ret x;}; ret test();");
        }

        [Test]
        public void ClosureSetTest()
        {
            AssertFoo("x='bar'; test=@(){x='foo';}; test(); ret x;");
        }

        [Test]
        public void ClosureSetTest2()
        {
            AssertFoo("x='foo'; test=@(){x='bar';}; ret x;");
        }

        [Test]
        public void ClosureSetTest3()
        {
            AssertFoo("x='bar'; test=@()x='foo'; test(); ret x;");
        }

        [Test]
        public void ClosureSetTest4()
        {
            AssertFoo("x='foo'; test=@()x='bar'; ret x;");
        }

        [Test]
        public void ScopeTest()
        {
            AssertEquals(false, "test=@(){x='foo'; ret x;}; test(); ret x?;");
        }

        [Test]
        public void ScopeTest2()
        {
            AssertEquals(false, "test=@()x='foo'; test(); ret x?;");
        }

        [Test]
        public void ScopeTest3()
        {
            AssertEquals(true, "x='foo'; ret x?;");
        }

        [Test]
        public void HigherOrderFunctionTest()
        {
            AssertFoo("call=@(x)x(); test=@()'foo'; ret call(test);");
        }

        [Test]
        public void HigherOrderFunctionTest2()
        {
            AssertEquals(9m, "add=@(x)@(y)x+y; addFour=add(4); ret addFour(5);");
        }

        [Test, Category("Conditional Statements")]
        public void IfTest()
        {
            AssertFoo("if(true){ret 'foo';}");
        }

        [Test, Category("Conditional Statements")]
        public void IfTest2()
        {
            AssertFoo("if(true)ret 'foo';");
        }

        [Test, Category("Conditional Statements")]
        public void ElseTest()
        {
            AssertFoo("if(false){ret 'bar';}else{ret 'foo';}");
        }

        [Test, Category("Conditional Statements")]
        public void ElseTest2()
        {
            AssertFoo("if(false)ret 'bar'; else ret 'foo';");
        }

        [Test]
        public void ForTest()
        {
            AssertFoo("c=['f','o','o']; s=''; for(x in c){s = s + x;} ret s;");
        }

        [Test]
        public void ForTest2()
        {
            AssertFoo("c=['f','o','o']; s=''; for(x in c)s = s + x; ret s;");
        }
    }
}
