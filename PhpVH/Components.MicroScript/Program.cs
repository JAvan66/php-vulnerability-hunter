using Components.MicroScript.Interpreter;
using Components.MicroScript.Lexer;
using Components.MicroScript.Parser;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Components.MicroScript
{
    class Program
    {
        static string GetCodeExcerpt(string code, MicroScriptToken token)
        {
            var matches = Regex.Matches(code, @"\r\n").OfType<Match>().ToArray();
            var line = Array.IndexOf(matches, matches.First(x => x.Index > token.Index));
            var lines = code.Replace("\r\n", "\n").Replace('\r', '\n').Replace("\n", "\r\n").Split(new[] { "\r\n" }, StringSplitOptions.None);
            var loc = lines[line];

            return string.Format("({0}) {1}", line, loc);
        }

        static void Execute(string code)
        {
            try
            {
                var interpreter = new MicroScriptInterpreter();
                interpreter.CurrentScope.Variables.Add("setInsecureCalls",
                    new MicroScriptObject(
                        new MicroScriptInteropFunction(x =>
                        {
                            return null;
                        })));
                interpreter.Interpret(code);
            }
            catch (MicroScriptParserException exception)
            {
                Console.WriteLine("Unexpected {0}\r\n\r\n{1}\r\n", exception.Token.Lexeme, GetCodeExcerpt(code, exception.Token));
            }
            //catch (MicroScriptRuntimeException exception)
            //{
            //    Console.WriteLine("Unexpected runtime exception\r\n\r\n{0}\r\n", exception.Message);
            //}
        }

        static void Main(string[] args)
        {
            #region test
            var code = "";



            code = @"

isFoo=@(x)x=='foo'

if (isFoo('foof')) 
{
    print('parameter is foo')
}
else
{
    print('parameter is not foo')
}

print('press enter to continue')
print(input())




x = 'hello'
x.y = 'world'
x.y.z = 'foo'
x.y.z.a = 'bar'

print(x.y.z.a)

person = {
    firstName: 'John',
    lastName: 'Smith',
    age: 25,
    address: {
        streetAddress: '21 2nd Street',
        city: 'New York',
        state: 'NY',
        postalCode: '10021'
    },
    phoneNumber: [
        {
            type: 'home',
            number: '212 555-1234'
        },
        {
            type: 'fax',
            number: '646 555-4567'
        }
    ]
}

print(person.address.'city')

//quotes = io.read('c:\temp\test.txt')
//print(quotes)


";

            code = @"
math = { cube: @(x)x*x*x }

calcMsg = 'Calculating cube of '

for [ 0, 1, 2, 3, 4 ] -> x {
    msg = calcMsg + x
    captureTest=@() { 
        f = 'cube'
        captureTest1=@() {
            print('Result: ' + math.{f}(x))
            msg='Done'
        }
        print(msg)
        captureTest1()
    }
    captureTest()
    print(msg)
}
";

            #endregion

            code = @"
#'Library\\Std.alx'
#'Library\\IO.alx'

foo = {}
checkFoo = @() print('Foo exists: ' + str(foo.bar?))
checkFoo()
if !foo.bar? foo.{'bar'} = { hurf: 1 }
checkFoo()
print('Test '  + str(foo.bar.{'hurf'}))

countTest = @(){
    print('Count: ' + [ 0, 1, 2, 3 ].count())
}

countTest()

@(){
    @(){
        a = { b: { c: { d: 10 }, x: 2 } }
        value = a.b.c.d*2+1/2+a.b.x
        print('Test: ' + value)
    }

    @(){
        addto = @(x) @(y) x + y  
        fourplus = addto(4)
        print('test' + fourplus(3))
    }()

    @(){
        factorial = @(n) { if n == 0 ret 1 else ret n * factorial(n - 1) }
        print ('factorial: ' + factorial(5))
    }()

    @(){
        numbers = [ 2, 2 ]
            .insert(0, 1)
            .add(3)
            .concat([4, 5, 6])
            .map(@(x)x*x)
            .collect(@(x) [ x, x * 2 ])
            .distinct()
            .filter(@(x)x<10)
        
        numbers.iter(@(x)print('Value: ' + x))

        /*
        print('Count: ' + numbers.count())

        anyNumber = @(x)numbers.any(@(y)x==y)

        print('Any zeros: ' + anyNumber(0))
        print('Any ones: ' + anyNumber(1))
        print('Contains 7: ' + numbers.contains(7))
        print('Contains 8: ' + numbers.contains(8))
        */
    }()
}()
";

            code = @"
#'Library\\Std.alx'

'foo'.getChars().iter(print)

f1=@(x)x f2=hexb

slashes = [ '\\', '/' ]
minDots = 2 
maxDots = 6 
travSeqLens = [ 4, 8, 16 ]
[ [ f1, f1 ], [ f1, f1 ] ]
.collect(@(a)
    range(minDots, maxDots - minDots + 1)
        .collect(@(x)slashes.map(@(y)'.'*x+y))
        .collect(@(x)travSeqLens.map(@(y)x*y))
        .map(str))
.iter(print)
";



            var stopwatch = new Stopwatch();

            stopwatch.Start();
            {
                Execute(code);
            }

            stopwatch.Stop();
            Console.WriteLine("Finished in {0}ms", stopwatch.ElapsedMilliseconds);
        }
    }
}
