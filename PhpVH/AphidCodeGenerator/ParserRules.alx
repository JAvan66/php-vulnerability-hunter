ret  {
    binOpExps:  [ 
        {
            name: "PipelineExpression",
            operand: "AssignmentExpression",
            operators: [ "PipelineOperator" ]
        },
        {
            name: "AssignmentExpression",
            operand: "LogicalExpression",
            operators: [ "AssignmentOperator" ]
        }, {
            name: "LogicalExpression",
            operand: "ComparisonExpression",
            operators: [ "AndOperator", "OrOperator" ]
        }, {
            name: "ComparisonExpression",
            operand: "PostfixUnaryOperationExpression",
            operators:  [ 
                "EqualityOperator", 
                "NotEqualOperator", 
                "LessThanOperator", 
                "LessThanOrEqualOperator", 
                "GreaterThanOperator", 
                "GreaterThanOrEqualOperator"
            ]
        }, {
            name: "BinaryOrExpression",
            operand: "XorExpression",
            operators: [ "BinaryOrOperator" ],
        }, {
            name: "XorExpression",
            operand: "BinaryAndExpression",
            operators: [ "XorOperator" ],
        }, {
            name: "BinaryAndExpression",
            operand: "ShiftExpression",
            operators: [ "BinaryAndOperator" ],
        }, {
            name: "ShiftExpression",
            operand: "AdditionExpression",
            operators: [ "ShiftLeft", "ShiftRight" ],
        }, {
            name: "AdditionExpression",
            operand: "Term",
            operators: [ "AdditionOperator", "MinusOperator" ]
        }, {
            name: "Term",
            operand: "PrefixUnaryOperatorExpression",
            operators: [ "MultiplicationOperator", "DivisionOperator", "ModulusOperator" ]
        }
    ]
};