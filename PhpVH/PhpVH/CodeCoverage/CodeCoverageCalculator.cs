using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Components;

namespace PhpVH.CodeCoverage
{
    public class CodeCoverageCalculator
    {
        private AnnotationTable _annotationTable;

        private FileInfo _annotationFile;

        public CodeCoverageCalculator(FileInfo annotationFile, AnnotationTable annotationTable)
        {
            _annotationFile = annotationFile;
            _annotationTable = annotationTable;
        }

        public CodeCoverageTable CalculateCoverage()
        {
            if (!_annotationFile.Exists)
            {
                return new CodeCoverageTable();
            }

            var entries = new List<string>();

            using (var reader = new StreamReader(_annotationFile.OpenRead()))
            {
                string entry;

                while ((entry = reader.ReadLine()) != null)
                {
                    //if (!entries.Contains(entry))
                    {
                        entries.Add(entry);
                    }
                }
            }

            var entryTable = new CodeCoverageTable();

            foreach (var entry in entries)
            {
                try
                {
                    var filename = entry.RemoveAtLastIndexOf('_');
                    var id = int.Parse(entry.SubstringAtLastIndexOf('_', 1));
                    _annotationTable[filename][id].HitCount++;                    
                }
                catch (System.Exception ex)
                {
#if DEBUG
                    TraceHelper.WriteLineFormat(ex.ToString());
#endif
                }
            }

            Func<Annotation, bool> wasHit = x => x.HitCount > 0;

            lock (_annotationTable)
            {
                var hitBlockCount = (decimal)_annotationTable
                    .Items
                    .SelectMany(x => x.Items.Where(wasHit))
                    .Count();

                var totalBlockCount = _annotationTable
                    .Items
                    .SelectMany(x => x.Items)
                    .Count();

                entryTable.Total = hitBlockCount / totalBlockCount * 100;

                _annotationTable
                    .Items
                    .Select(x => new
                    {
                        Filename = x.Filename,
                        HitBlockCount = x.Items.Count(wasHit),
                        TotalBlockCount = x.Items.Count,
                        Coverage = (decimal)x.Items.Count(wasHit) / x.Items.Count * 100,
                    })
                    .Iter(x => entryTable.Add(x.Filename, x.Coverage));
            }

            return entryTable;
        }
    }
}
