using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PhpVHUnitTests
{
    [TestClass]
    public class CodeCoverageUnitTests : PhpUnitTests
    {
        protected override string GetFolder()
        {
            return "Php\\CodeCoverage";
        }

        private void RunCodeCoverageTest(string testName, decimal expectedValue)
        {
            using (var tester = new PhpVHTester(
                testName,
                "X",
                new[] { GetFolder() + "\\" + testName + "." + GetExtension() }))
            {
                tester.CodeCoverage = 2;
                tester.RunPhpVH();
                var coverage = tester.LoadCoverage();

                Assert.AreEqual(2, coverage.Count);

                var falsePositive = coverage.FirstOrDefault(x => x.Key.EndsWith("\\FalsePositiveCheck.php"));

                Assert.IsNotNull(falsePositive);
                Assert.AreEqual((decimal)100.0, falsePositive.Value);

                coverage.Remove(falsePositive.Key);
                Assert.AreEqual(expectedValue, coverage.First().Value);
            }
        }

        [TestMethod]
        public void TestBlockCoverage()
        {
            RunCodeCoverageTest("CodeCoverage", 80M);
        }

        [TestMethod]
        public void TestBlockCoverage2()
        {
            RunCodeCoverageTest("CodeCoverage2", 100M);
        }

        [TestMethod]
        public void TestBlockCoverage3()
        {
            RunCodeCoverageTest("CodeCoverage3", 50M);
        }

        [TestMethod]
        public void TestBlockCoverage4()
        {
            RunCodeCoverageTest("CodeCoverage4", 100M);
        }
    }
}
