using Components.MicroScript.Interpreter;
using Components.MicroScript.Lexer;
using Components.MicroScript.Parser;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Components.MicroScript
{
    class Program
    {
        static void Execute(string code)
        {
            var lexer = new MicroScriptLexer(code);
            var tokens = lexer
                .GetTokens()
                .Where(x =>
                    x.TokenType != MicroScriptTokenType.WhiteSpace &&
                    x.TokenType != MicroScriptTokenType.Comment);

            var parser = new MicroScriptParser(tokens.ToArray());
            var ast = parser.Parse();
            var interpreter = new MicroScriptInterpreter();
            interpreter.Interpret(ast);
        }

        static void Main(string[] args)
        {
            #region test
            var code = "";



            code = @"

isFoo=@(x)x=='foo'

if (isFoo('foof')) 
{
    print('parameter is foo')
}
else
{
    print('parameter is not foo')
}

print('press enter to continue')
print(input())




x = 'hello'
x.y = 'world'
x.y.z = 'foo'
x.y.z.a = 'bar'

print(x.y.z.a)

person = {
    firstName: 'John',
    lastName: 'Smith',
    age: 25,
    address: {
        streetAddress: '21 2nd Street',
        city: 'New York',
        state: 'NY',
        postalCode: '10021'
    },
    phoneNumber: [
        {
            type: 'home',
            number: '212 555-1234'
        },
        {
            type: 'fax',
            number: '646 555-4567'
        }
    ]
}

print(person.address.'city')

//quotes = io.read('c:\temp\test.txt')
//print(quotes)


";

            code = @"
math = { cube: @(x)x*x*x }

calcMsg = 'Calculating cube of '

for [ 0, 1, 2, 3, 4 ] -> x {
    msg = calcMsg + x
    captureTest=@() { 
        f = 'cube'
        captureTest1=@() {
            print('Result: ' + math.{f}(x))
            msg='Done'
        }
        print(msg)
        captureTest1()
    }
    captureTest()
    print(msg)
}
";


            code = @"
addto = @(x) @(y) x + y  
fourplus = addto(4)
print('test' + fourplus(3))

factorial = @(n) { if n == 0 ret 1 else ret n * factorial(n - 1) }
print ('factorial: ' + factorial(5))

//a = { b: { c: { d: 10 }, x: 2 } }
//value = a.b.c.d*2+1/2+a.b.x
//print('Test: ' + value)

//x = a

__initList = @(l) {
    l.add = @(item) { 
        __list.add(l, item) 
        ret l 
    }

    l.insert = @(index, item) { 
        __list.insert(l, index, item) 
        ret l 
    }

    l.iter = @(action) for x in l action(x)

    l.contains = @(item) __list.contains(l, item)

    l.map = @(mapping) { 
        x = [] 
        for y in l __list.add(x, mapping(y)) 
        ret x 
    }
    
    l.filter = @(predicate) { 
        x = [] 
        for y in l if predicate(y) __list.add(x, y) 
        ret x 
    }

    l.collect = @(fan) {
        x = []
        for y in l for z in fan(y) x.add(z)
        ret x
    }

    l.distinct = @() {
        x = []
        for y in l if !__list.contains(x, y) x.add(y)
        ret x
    }

    l.count = @() {
        c = 0
        for x in l c++
        ret c
    }

    l.any = @(predicate) {
        for x in l if predicate(x) ret true
        ret false
    }

    ret l
}

numbers = [ 2, 2 ]
    .insert(0, 1)
    .add(3)
    .map(@(x)x*x)
    .collect(@(x) [ x, x * 2 ])
    .distinct()
    .filter(@(x)x<10)

numbers.iter(@(x)print('Value: ' + x))

print('Count: ' + numbers.count())

anyNumber = @(x)numbers.any(@(y)x==y)

print('Any zeros: ' + anyNumber(0))
print('Any ones: ' + anyNumber(1))
print('Contains 7: ' + numbers.contains(7))
print('Contains 8: ' + numbers.contains(8))
";
            #endregion



//            code = @"
//(@()print('hello world'))()
//
//";


            // add behaviors for primitives (arrays and such)
            var stopwatch = new Stopwatch();
            
            stopwatch.Start();
             {
                Execute(code);
            }
            
            stopwatch.Stop();
            Console.WriteLine("Finished in {0}ms", stopwatch.ElapsedMilliseconds);
        }
    }
}
