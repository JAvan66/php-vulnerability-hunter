using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Components;

namespace PhpVH.CodeCoverage
{
    public class CodeCoverageTable : Dictionary<string, decimal>
    {
        public string Plugin { get; set; }

        public decimal Total { get; set; }

        public override string ToString()
        {
            var s = new StringBuilder(Plugin + "\r\n");

            foreach (var k in this
                .Concat(new[] { new KeyValuePair<string, decimal>("Total", Total) })
                .Select(x => string.Format("{0}: {1:0.##}%", x.Key, x.Value)))
                s.AppendLine(k);
            //foreach (var k in Keys)
            //    s.AppendLine(string.Format("{0}: {1:0.##}%", k, this[k]));

            return s.ToString();
        }

        public static CodeCoverageTable Parse(string text)
        {
            var table = new CodeCoverageTable();

            var lines = text.SplitLines(StringSplitOptions.RemoveEmptyEntries);

            Regex r = new Regex(@"(.*):\s*(\d+(\.\d+)?)%");

            table.Plugin = lines[0];
            var items = lines
                .Skip(1)
                .Select(x => r.Match(x))
                .Select(x => new 
                { 
                    Filename = x.Groups[1].Value, 
                    Coverage = decimal.Parse(x.Groups[2].Value)
                })
                .ToArray();

            foreach (var item in items.Take(items.Length - 1))
                table.Add(item.Filename, item.Coverage);

            table.Total = items.Last().Coverage;

            return table;
        }

        public static CodeCoverageTable[] ParseReport(string text)
        {
            return text
                .Split(new string[] { "\r\n\r\n\r\n" },
                    StringSplitOptions.RemoveEmptyEntries)
                .Select(x => Parse(x))
                .ToArray();
        }
    }
}
