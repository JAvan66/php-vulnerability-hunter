using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Components;

namespace PhpVH.ScanPlugins
{
    public class LocalFileInclusionScanPlugin : ScanPluginBase
    {
        public const string ProbeFile = "lfi_test.txt";

        public static string[] FilePaths = new string[]
        {
            "../".Repeat(32) + ProbeFile,
            "../".Repeat(16) + ProbeFile,

            "....//".Repeat(32) + ProbeFile,
            "....//".Repeat(16) + ProbeFile,

            "../".Repeat(32) + ProbeFile + (char)0 + ".jpg",
            "../".Repeat(16) + ProbeFile + (char)0 + ".jpg",

            "....//".Repeat(32) + ProbeFile + (char)0 + ".jpg",
            "....//".Repeat(16) + ProbeFile + (char)0 + ".jpg",

            @"..\".Repeat(32) + ProbeFile,
            @"..\".Repeat(16) + ProbeFile,

            @"....\\".Repeat(32) + ProbeFile,
            @"....\\".Repeat(16) + ProbeFile,

            @"..\".Repeat(32) + ProbeFile + (char)0 + ".jpg",
            @"..\".Repeat(16) + ProbeFile + (char)0 + ".jpg",

            @"....\\".Repeat(32) + ProbeFile + (char)0 + ".jpg",
            @"....\\".Repeat(16) + ProbeFile + (char)0 + ".jpg",

            //"..%2F".Repeat(32) + _badFile,

            
            //"....%2F%2F".Repeat(32) + _badFile,
            
            //"..\\".Repeat(32) + File,
            //"..%5C".Repeat(32) + File,
            //"c:/boot.txt",
            //"c:%2Fboot.txt",
            //"c:\\boot.txt",
            //"c:%5Cboot.txt",

            //"../".Repeat(32) + _badFile + "%00.jpg",
            //"..%2F".Repeat(32) + _badFile + "%00.jpg",

            //"....//".Repeat(32) + _badFile + "%00.jpg",
            //"....%2F%2F".Repeat(32) + _badFile + "%00.jpg",
            
            //"..\\".Repeat(32) + File + "%00",
            //"..%5C".Repeat(32) + File + "%00",
            //"c:/boot.txt%00",
            //"c:%2Fboot.txt%00",
            //"c:\\boot.txt%00",
            //"c:%5Cboot.txt%00",

            
            //"..%2F".Repeat(32) + _badFile + (char)0 + ".jpg",

            
            //"....%2F%2F".Repeat(32) + _badFile + (char)0 + ".jpg",

            //"..\\".Repeat(32) + File + (char)0,
            //"..%5C".Repeat(32) + File + (char)0,
            //"c:/boot.txt" + (char)0,
            //"c:%2Fboot.txt" + (char)0,
            //"c:\\boot.txt" + (char)0,
            //"c:%5Cboot.txt" + (char)0,
        };

        private string[] _suspectFunctions = new string[]
        {
            "include",
            "require",
            "require_once"
        };

        private string _badChars = "LFI_Test123";

        public override int ModeCount
        {
            get { return FilePaths.Length; }
        }

        private string _server;

        public override string Server
        {
            get { return _server; }
            set { _server = value; }
        }

        FileSystemWatcher watcher;

        public LocalFileInclusionScanPlugin(string Server)
        {
            _server = Server;
        }

        private FileSystemEventArgs _fsArgs;

        void watcher_FileSystemEvent(object sender, FileSystemEventArgs e)
        {
            if (e.Name == ProbeFile)
            {
                _fsArgs = e;

                if (e.ChangeType == WatcherChangeTypes.Deleted)
                    WriteProbe();
            }
        }

        public override string BuildRequest(int Mode, string TargetFile, FileTrace SourceTrace)
        {
            return SourceTrace.Calls.CreateRequest(TargetFile, Server, FilePaths[Mode], 
                false, false, true);
        }

        private void WriteProbe()
        {
            using (var stream = System.IO.File.OpenWrite(@"C:\" + ProbeFile))
                stream.WriteString(_badChars + "<?php echo 5200 + 30; ?>");
        }

        public void DeleteProbe()
        {
            File.Delete(@"C:\" + ProbeFile);
        }

        public override ScanAlert ScanTrace(FileTrace TargetTrace)
        {
            if (_fsArgs != null)
            {
                Console.ForegroundColor = ConsoleColor.Red;                

                watcher.EnableRaisingEvents = false;

                WriteProbe();

                watcher.EnableRaisingEvents = true;

                var c = _fsArgs.ChangeType;
                
                _fsArgs = null;

                return new ScanAlert(ScanAlertOptions.Vulnerability,
                    "File System Event: " + c, TargetTrace);
            }
            
            //if (TargetTrace.File.Contains("index"))
            //    TraceHelper.WriteFormat("");

            var badCharsLowered = _badChars.ToLower();

            if (TargetTrace.Response.ToLower().Contains(badCharsLowered))
            {
                return new ScanAlert(ScanAlertOptions.Vulnerability,
                        TargetTrace.Response.ToLower().Contains(badCharsLowered + "5230") ?
                            "Local File Inclusion" :
                            "Arbitrary File Read",
                        TargetTrace);
            }
            //else if (TargetTrace.Calls.Exists(x =>
            //    _suspectFunctions.Contains(x.Name) &&
            //    x.ParameterValues.Count > 0 &&
            //    x.ParameterValues[0].ToLower().Contains(File)))
            //{
            //    return new ScanAlert(ScanAlertOptions.Warning, "User Submitted Data",
            //        TargetTrace);
            //}
            else
                return null;
        }

        public override string ToString()
        {
            return "Local File Inclusion/Arbitrary Read Scan";
        }

        public override void Initialize()
        {
            try
            {
                WriteProbe();
            }
            catch (System.Exception ex)
            {
                Cli.DisplayCriticalMessageAndExit("Could not create LFI probe. Please run PHPVH as administrator.");
            }            

            var path = new DirectoryInfo(Program.Config.WebRoot).Root.ToString();
            watcher = new FileSystemWatcher(path);
            watcher.Changed += watcher_FileSystemEvent;
            watcher.Created += watcher_FileSystemEvent;
            watcher.Deleted += watcher_FileSystemEvent;
            watcher.EnableRaisingEvents = true;

            base.Initialize();
        }

        public override void Uninitialize()
        {
            watcher.Changed -= watcher_FileSystemEvent;
            watcher.Created -= watcher_FileSystemEvent;
            watcher.Deleted -= watcher_FileSystemEvent;
            watcher.EnableRaisingEvents = true;
            watcher = null;
            _fsArgs = null;

            DeleteProbe();

            base.Uninitialize();
        }
    }    
}
