using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PhpVH.LexicalAnalysis;

namespace PhpVH
{
    public class ExpressionAnalyzer
    {
        private Token[] _tokens;

        public ExpressionAnalyzer(Token[] tokens)
        {
            _tokens = tokens;
        }

        public List<Token[]> FindSuperGlobalStringComparisons()
        {
            var matches = new List<Token[]>();

            var state = 0;

            var operators = new[]
            {
                TokenType.EqualityOperator,
                TokenType.NotEqualOperator,
                TokenType.IdenticalOperator,
                TokenType.NotIdenticalOperator,                
            };

            var expressionTokens = new Token[4];

            for (int i = 0; i < _tokens.Length; i++)
            {
                var t = _tokens[i];

                if (t.TokenType == TokenType.WhiteSpace ||
                    t.TokenType == TokenType.Comment)
                {
                    continue;
                }

                if (state == 0 &&
                    t.TokenType == TokenType.Variable &&
                    Php.Superglobals.Contains(t.Lexeme))
                {
                    expressionTokens[0] = t;
                    state = 1;
                }
                else if (state == 1 && t.TokenType == TokenType.LeftBracket)
                {
                    state = 2;
                }
                else if (state == 2 && t.TokenType == TokenType.String)
                {
                    expressionTokens[1] = t;
                    state = 3;
                }
                else if (state == 3 && t.TokenType == TokenType.RightBracket)
                {
                    state = 4;
                }
                else if (state == 4 && operators.Contains(t.TokenType))
                {
                    expressionTokens[2] = t;
                    state = 5;
                }
                else if (state == 5 && t.TokenType == TokenType.String)
                {
                    expressionTokens[3] = t;
                    matches.Add(expressionTokens);
                    expressionTokens = new Token[4];

                    state = 0;
                }
                else
                {
                    state = 0;
                }
            }

            return matches;
        }
    }
}
