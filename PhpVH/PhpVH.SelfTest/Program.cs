using Components;
using Components.Aphid.Interpreter;
using Components.ConsolePlus;
using NUnit.Util;
using PhpVH.Tests.Integration;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace PhpVH.SelfTest
{
    class Program
    {
        static void WriteHeader(string header)
        {
            var headerStyle = string.Format("~{0}~~|{1}~", ConsoleColor.Blue, ConsoleColor.White);
            Cli.WriteHeader(header, headerStyle);
        }

        static int RunNUnit(SelfTestAssembly asm, SelfTest test)
        {
            return NUnit.ConsoleRunner.Runner.Main(new[] 
            { 
                asm.Assembly, 
                test.Arg,                
                "/nologo",
                "/trace:Off",
                "/domain:none",
                "/out:TestResult.txt",
                "/err:TestErr.txt",
            });
        }

        static TestResult ProcessTestResults(SelfTest test)
        {
            var results = NUnitResults.Load(PathHelper.GetEntryPath("TestResult.xml"));
            var testCases = results
                .GetTestCases()
                .Select(x => new
                {
                    Element = x,
                    Description = x.Attribute("description") != null ? x.Attribute("description").Value : null,
                    Success = bool.Parse(x.Attribute("success").Value),
                    Messages = x.Descendants("message").Select(y => y.Value).ToArray()
                })
                .ToArray();

            var len = testCases.Select(x => x.Description.Length).OrderByDescending(x => x).First();

            var maxPadding = 4;

            var padding = (len % maxPadding);

            if (padding == 0)
            {
                padding = maxPadding;
            }

            len += padding;

            foreach (var testCase in testCases)
            {
                var result = testCase.Success ? "Success" : "Fail";
                var color = testCase.Success ? ConsoleColor.Green : ConsoleColor.Red;
                Cli.WriteLine("{0}~{1}~{2}~R~", testCase.Description.PadRight(len, '.'), color, result);
            }

            var succeeded = testCases.Count(x => x.Success);
            var total = testCases.Count();

            var resultColor = 
                succeeded == 0 ? ConsoleColor.Red : 
                succeeded != total ? ConsoleColor.Yellow : 
                ConsoleColor.Green;

            var msg =
                succeeded == 0 ? test.Messages[0] :
                succeeded != total ? test.Messages[1] :
                test.Messages[2];

            var successPct = (100 * ((decimal)succeeded / total));

            var details = testCases.SelectMany(x => x.Messages).DefaultIfEmpty().Aggregate((x, y) => x + "\r\n" + y);

            Cli.WriteLine("\r\n~{0}~{1}% ({2}/{3})~R~ tests passed\r\n\r\n{4}\r\n", resultColor, successPct, succeeded, total, msg);

            return new TestResult(test.Name, msg, details, testCases.All(x => x.Success), succeeded, total);
        }

        static TestResult RunTest(SelfTestAssembly asm, SelfTest test)
        {
            WriteHeader(string.Format("PHPVH Self Test: {0}", test.Name));
            Cli.WriteLine();
            RunNUnit(asm, test);
            Cli.WriteLine("~Cyan~Test Results~R~");
            return ProcessTestResults(test);
        }

        private static SelfTestAssembly[] LoadAssemblies()
        {
            var interpreter = new AphidInterpreter();
            interpreter.InterpretFile(PathHelper.GetEntryPath("Tests.alx"));
            var retVal = interpreter.GetReturnValue();
            return retVal.ConvertToArray<SelfTestAssembly>();
        }        

        private static List<TestResult> GetTestResults()
        {
            return ServiceLocator.Default.ResolveOrCreate<List<TestResult>>();
        }

        [STAThread]
        static void Main(string[] args)
        {
            var results = GetTestResults();            
            
            var asms = LoadAssemblies();
            foreach (var asm in asms)
            {
                foreach (var test in asm.Tests)
                {
                    if (test.Required != null)
                    {
                        var requiredResults = results.Where(x => test.Required.Contains(x.Name));
                        var succeeded = requiredResults.All(x => x.Succeeded);
                        var failedOrSkipped = requiredResults.Where(x => !x.Succeeded || x.Skipped);

                        if (!succeeded)
                        {
                            var msg = string.Format(
                                "Skipping because the following tests failed or were skipped: {0}",
                                string.Join(", ", failedOrSkipped.Select(x => x.Name)));

                            results.Add(new TestResult() { Name = test.Name, Skipped = true, Details = msg });

                            Cli.WriteLine("Skipping ~Yellow~{0} Test~R~\r\n{1}\r\n", test.Name, msg);
                            continue;
                        }
                    }

                    results.Add(RunTest(asm, test));
                }
            }

            var foo = GetTestResults();
        }
    }
}
