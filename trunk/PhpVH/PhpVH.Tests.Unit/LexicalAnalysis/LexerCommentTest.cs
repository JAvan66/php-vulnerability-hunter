using System.Collections.Generic;
using NUnit.Framework;
using PhpVH.LexicalAnalysis;

namespace PhpVH.Tests.Unit.LexicalAnalysis
{
    [TestFixture]
    public class LexerCommentTest
    {
        [Test]
        public void Octothorpe_Returns_Comment_Token()
        {
            TokenAssert.IsValid(TokenType.Comment, "#");
        }

        [Test, Category("PhpLexer")]
        public void Two_Slashes_Returns_Comment_Token()
        {
            TokenAssert.IsValid(TokenType.Comment, "//");
        }

        [Test, Category("PhpLexer")]
        public void Three_Slashes_Returns_Comment_Token()
        {
            TokenAssert.IsValid(TokenType.Comment, "///");
        }

        [Test, Category("PhpLexer")]
        public void Star_Slash_Returns_Comment_Token()
        {
            TokenAssert.IsValid(TokenType.Comment, "/* comment */");
        }

        [Test, Category("PhpLexer")]
        public void Star_Slash_No_Close_Tag_Returns_Comment_Token()
        {
            var lexer = new Lexer("<?/*");
            var tokens = lexer.GetTokens();
            CollectionAssert.AreEqual(new List<Token>
            {
                new Token(TokenType.OpenTag, "<?", 0),
                new Token(TokenType.Comment, "/*", 2)
            }, tokens);
        }

        [Test, Category("PhpLexer")]
        public void Two_Slashes_Newline_Returns_Comment_Token()
        {
            var lexer = new Lexer("<?//\nfunct");
            var tokens = lexer.GetTokens();
            CollectionAssert.AreEqual(new List<Token>
            {
                new Token(TokenType.OpenTag, "<?", 0),
                new Token(TokenType.Comment, "//", 2),
                new Token(TokenType.WhiteSpace, "\n", 4),
                new Token(TokenType.Unknown, "funct", 5)
            }, tokens);
        }

        [Test, Category("PhpLexer")]
        public void Two_Slashes_No_Close_Tag_Returns_Comment_Token()
        {
            var lexer = new Lexer("<?//");
            var tokens = lexer.GetTokens();
            CollectionAssert.AreEqual(new List<Token>
            {
                new Token(TokenType.OpenTag, "<?", 0),
                new Token(TokenType.Comment, "//", 2)
            }, tokens);
        }
    }
}
