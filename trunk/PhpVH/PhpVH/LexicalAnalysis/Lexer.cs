using System;
using System.Collections.Generic;

namespace PhpVH.LexicalAnalysis
{
    public enum TokenType : short
    {
        None,
        AdditionOperator,
        Ampersand,
        AndOperator,
        AssignmentOperator,
        BacktickString,
        CloseTag,
        Comma,
        Comment,
        ComplementOperator,
        ConcatEqualOperator,
        DecrementOperator,
        DivisionEqualOperator,
        DivisionOperator,
        EndOfFile,
        EndOfStatement,
        EqualityOperator,
        ErrorSuppressor,
        GreaterThanOperator,
        GreaterThanOrEqualOperator,
        HereDocString,
        Html,
        IdenticalOperator,
        Identifier,
        IncrementOperator,
        Keyword,
        LeftBrace,
        LeftBracket,
        LeftParenthesis,
        LessThanOperator,
        LessThanOrEqualOperator,
        MinusEqualOperator,
        ModulusEqualOperator,
        ModulusOperator,
        MultiplicationEqualOperator,
        MultiplicationOperator,
        Namespace,
        NotEqualOperator,
        NotIdenticalOperator,
        NotOperator,
        Number,
        ObjectOperator,
        OpenTag,
        OpenTagWithEcho,
        OrEqualOperator,
        OrOperator,
        PlusEqualOperator,
        RightBrace,
        RightBracket,
        RightParenthesis,
        ScopeResolutionOperator,
        ShiftLeft,
        ShiftRight,
        String,
        StringConcatOperator,
        SubtractionOperator,
        TernaryOperator,
        Unknown,
        Variable,
        VariableVariable,
        WhiteSpace,
        XorEqualOperator,
        XorOperator
    }

    public struct Token
    {
        public TokenType TokenType;
        public string Lexeme;
        public int Index;

        public Token(TokenType tokenType, string lexeme, int index)
        {
            TokenType = tokenType;
            Lexeme = lexeme;
            Index = index;
        }

        public Token(TokenType tokenType, int index)
            : this(tokenType, null, index)
        {
        }

        public override string ToString()
        {
            return string.Format("{0}[{2}]: {1}", TokenType, Lexeme, Index);
        }
    }

    public class Lexer
    {
        private string text = "";

        public string Text
        {
            get { return text; }
            set
            {
                text = value;
                lastIndex = text.Length - 1;
            }
        }

        int lastIndex = -1;

        int charIndex = -1;

        int mode = 0;

        int state = 0;

        char currentChar = (char)0;

        public Lexer()
        {
        }

        public Lexer(string text)
        {
            Text = text;
        }

        bool NextChar()
        {
            if (charIndex < lastIndex)
            {
                currentChar = text[++charIndex];
                return true;
            }

            return false;
        }

        void PreviousChar()
        {
            //currentChar = text[--charIndex];
            charIndex--;
        }

        public TokenType GetToken()
        {

            if (mode == 0)
            {
                if (charIndex < lastIndex)
                {
                    currentChar = text[++charIndex];

                    switch (currentChar)
                    {
                        case '<':
                            if (charIndex < lastIndex)
                            {
                                currentChar = text[++charIndex];

                                switch (currentChar)
                                {
                                    case '?':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case 'p':
                                                    if (charIndex < lastIndex)
                                                    {
                                                        currentChar = text[++charIndex];

                                                        switch (currentChar)
                                                        {
                                                            case 'h':
                                                                if (charIndex < lastIndex)
                                                                {
                                                                    currentChar = text[++charIndex];

                                                                    switch (currentChar)
                                                                    {
                                                                        case 'p':

                                                                            mode = 1;
                                                                            return TokenType.OpenTag;

                                                                    }

                                                                    charIndex--;
                                                                }

                                                                break;

                                                        }

                                                        charIndex--;
                                                    }

                                                    break;

                                                case '=':

                                                    mode = 1;
                                                    return TokenType.OpenTagWithEcho;

                                            }

                                            charIndex--;
                                        }
                                        mode = 1;
                                        return TokenType.OpenTag;

                                    case '%':
                                        if (charIndex < lastIndex)
                                        {
                                            currentChar = text[++charIndex];

                                            switch (currentChar)
                                            {
                                                case '=':

                                                    mode = 1;
                                                    return TokenType.OpenTagWithEcho;

                                            }

                                            charIndex--;
                                        }
                                        mode = 1;
                                        return TokenType.OpenTag;

                                }

                                charIndex--;
                            }
                            state = 0;
                            do
                            {
                                if (state == 0 && currentChar == '<')
                                    state = 1;
                                else if (state == 1 && currentChar == '?')
                                {
                                    charIndex -= 2;
                                    return TokenType.Html;
                                }
                                else
                                    state = 0;
                            }
                            while (NextChar());
                            return TokenType.Html;

                            break;

                        default:
                            state = 0;
                            do
                            {
                                if (state == 0 && currentChar == '<')
                                    state = 1;
                                else if (state == 1 && currentChar == '?')
                                {
                                    charIndex -= 2;
                                    return TokenType.Html;
                                }
                                else
                                    state = 0;
                            }
                            while (NextChar());
                            return TokenType.Html;

                            break;

                    }

                    return TokenType.Unknown;
                }
            }
            else
                if (mode == 1)
                {
                    if (charIndex < lastIndex)
                    {
                        currentChar = text[++charIndex];

                        switch (currentChar)
                        {
                            case '&':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '&':

                                            return TokenType.AndOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.Ampersand;

                            case ',':

                                return TokenType.Comma;

                            case ':':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case ':':

                                            return TokenType.ScopeResolutionOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.TernaryOperator;

                            case '-':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '>':

                                            return TokenType.ObjectOperator;

                                        case '=':

                                            return TokenType.MinusEqualOperator;

                                        case '-':

                                            return TokenType.DecrementOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.SubtractionOperator;

                            case '\\':

                                return TokenType.Namespace;

                            case '@':

                                return TokenType.ErrorSuppressor;

                            case '(':

                                return TokenType.LeftParenthesis;

                            case ')':

                                return TokenType.RightParenthesis;

                            case '[':

                                return TokenType.LeftBracket;

                            case ']':

                                return TokenType.RightBracket;

                            case '{':

                                return TokenType.LeftBrace;

                            case '}':

                                return TokenType.RightBrace;

                            case '=':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':
                                            if (charIndex < lastIndex)
                                            {
                                                currentChar = text[++charIndex];

                                                switch (currentChar)
                                                {
                                                    case '=':

                                                        return TokenType.IdenticalOperator;

                                                }

                                                charIndex--;
                                            }
                                            return TokenType.EqualityOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.AssignmentOperator;

                            case '+':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.PlusEqualOperator;

                                        case '+':

                                            return TokenType.IncrementOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.AdditionOperator;

                            case '*':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.MultiplicationEqualOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.MultiplicationOperator;

                            case '/':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.DivisionEqualOperator;

                                        case '/':

                                            state = 0;
                                            while (NextChar())
                                            {
                                                if (currentChar == '\r' || currentChar == '\n')
                                                {
                                                    charIndex--;
                                                    return TokenType.Comment;
                                                }
                                                else if (currentChar == '?')
                                                {
                                                    state = 1;
                                                }
                                                else if (state == 1 && currentChar == '>')
                                                {
                                                    charIndex -= 2;
                                                    return TokenType.Comment;
                                                }
                                                else
                                                {
                                                    state = 0;
                                                }
                                            }
                                            return TokenType.Comment;

                                            break;

                                        case '*':

                                            state = 0;
                                            while (NextChar())
                                            {
                                                if ((state == 0 || state == 1) && currentChar == '*')
                                                    state = 1;
                                                else if (state == 1 && currentChar == '/')
                                                    return TokenType.Comment;
                                                else
                                                    state = 0;
                                            }
                                            return TokenType.Comment;

                                            break;

                                    }

                                    charIndex--;
                                }
                                return TokenType.DivisionOperator;

                            case '%':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.ModulusEqualOperator;

                                        case '>':

                                            mode = 0;
                                            return TokenType.CloseTag;

                                    }

                                    charIndex--;
                                }
                                return TokenType.ModulusOperator;

                            case '.':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.ConcatEqualOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.StringConcatOperator;

                            case '|':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.OrEqualOperator;

                                        case '|':

                                            return TokenType.OrOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.OrOperator;

                            case '^':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':

                                            return TokenType.XorEqualOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.XorOperator;

                            case '~':

                                return TokenType.ComplementOperator;

                            case '<':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '<':
                                            if (charIndex < lastIndex)
                                            {
                                                currentChar = text[++charIndex];

                                                switch (currentChar)
                                                {
                                                    case '<':

                                                        state = 0;
                                                        string id = null;
                                                        int idStart = 0;
                                                        var isString = false;
                                                        while (NextChar())
                                                        {
                                                            if (state == 0 && (currentChar == ' ' || currentChar == '\t'))
                                                                continue;
                                                            else if (state == 0 && !isString && currentChar == '\'')
                                                                isString = true;
                                                            else if (state == 0 &&
                                                            ((currentChar >= 'a' && currentChar <= 'z') ||
                                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                                            currentChar == '_' ||
                                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                            {
                                                                idStart = charIndex;
                                                                state = 1;
                                                            }
                                                            else if (state == 1 &&
                                                            ((currentChar >= 'a' && currentChar <= 'z') ||
                                                            (currentChar >= 'A' && currentChar <= 'Z') ||
                                                            (currentChar >= '0' && currentChar <= '9') ||
                                                            currentChar == '_' ||
                                                            (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                                                state = 1;
                                                            else if (state == 1 || state == 2)
                                                            {
                                                                id = text.Substring(idStart, charIndex - idStart);
                                                                if (isString)
                                                                {
                                                                    if (currentChar == '\'')
                                                                        NextChar();
                                                                    else
                                                                        return TokenType.Unknown;
                                                                }
                                                                state = 3;
                                                                break;
                                                            }
                                                            else
                                                                return TokenType.Unknown;
                                                        }
                                                        var exitState = id.Length + 1;
                                                        state = 0;
                                                        do
                                                        {
                                                            if ((state == 0 || state == 1) && currentChar == '\n')
                                                                state = 1;
                                                            else if (state != 0 && id[state - 1] == currentChar)
                                                            {
                                                                if (++state == exitState)
                                                                    return TokenType.HereDocString;
                                                            }
                                                            else
                                                                state = 0;
                                                        }
                                                        while (NextChar());
                                                        return TokenType.Unknown;

                                                        break;

                                                }

                                                charIndex--;
                                            }
                                            return TokenType.ShiftLeft;

                                        case '>':

                                            return TokenType.NotEqualOperator;

                                        case '=':

                                            return TokenType.LessThanOrEqualOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.LessThanOperator;

                            case '>':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '>':

                                            return TokenType.ShiftRight;

                                        case '=':

                                            return TokenType.GreaterThanOrEqualOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.GreaterThanOperator;

                            case '!':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '=':
                                            if (charIndex < lastIndex)
                                            {
                                                currentChar = text[++charIndex];

                                                switch (currentChar)
                                                {
                                                    case '=':

                                                        return TokenType.NotIdenticalOperator;

                                                }

                                                charIndex--;
                                            }
                                            return TokenType.NotEqualOperator;

                                    }

                                    charIndex--;
                                }
                                return TokenType.NotOperator;

                            case '?':
                                if (charIndex < lastIndex)
                                {
                                    currentChar = text[++charIndex];

                                    switch (currentChar)
                                    {
                                        case '>':

                                            mode = 0;
                                            return TokenType.CloseTag;

                                    }

                                    charIndex--;
                                }
                                return TokenType.TernaryOperator;

                            case ';':

                                return TokenType.EndOfStatement;

                            case '\x0d':

                                return TokenType.WhiteSpace;

                            case '\x0a':

                                return TokenType.WhiteSpace;

                            case '\x09':

                                return TokenType.WhiteSpace;

                            case '\x0b':

                                return TokenType.WhiteSpace;

                            case ' ':

                                return TokenType.WhiteSpace;

                            case '$':

                                state = 0;
                                while (NextChar())
                                {
                                    if (state == 0 &&
                                    ((currentChar >= 'a' && currentChar <= 'z') ||
                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                    currentChar == '_' ||
                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                        state = 1;
                                    else if (state == 1 &&
                                    ((currentChar >= 'a' && currentChar <= 'z') ||
                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                    (currentChar >= '0' && currentChar <= '9') ||
                                    currentChar == '_' ||
                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                        state = 1;
                                    else if (state == 1 || state == 2)
                                    {
                                        charIndex--;
                                        return TokenType.Variable;
                                    }
                                    else if (state == 0)
                                    {
                                        charIndex--;
                                        return TokenType.VariableVariable;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }

                                break;

                            case '"':

                                bool escaped = false;
                                while (NextChar())
                                {
                                    if (!escaped && currentChar == '"')
                                        return TokenType.String;
                                    escaped = !escaped && currentChar == '\\';
                                }
                                return TokenType.String;

                                break;

                            case '\'':

                                escaped = false;
                                while (NextChar())
                                {
                                    if (!escaped && currentChar == '\'')
                                        return TokenType.String;
                                    escaped = !escaped && currentChar == '\\';
                                }
                                return TokenType.String;

                                break;

                            case '`':

                                escaped = false;
                                while (NextChar())
                                {
                                    if (!escaped && currentChar == '`')
                                        return TokenType.BacktickString;
                                    escaped = !escaped && currentChar == '\\';
                                }
                                return TokenType.BacktickString;

                                break;

                            case '#':

                                state = 0;
                                while (NextChar())
                                {
                                    if (currentChar == '\r' || currentChar == '\n')
                                    {
                                        charIndex--;
                                        return TokenType.Comment;
                                    }
                                    else if (currentChar == '?')
                                    {
                                        state = 1;
                                    }
                                    else if (state == 1 && currentChar == '>')
                                    {
                                        charIndex -= 2;
                                        return TokenType.Comment;
                                    }
                                    else
                                    {
                                        state = 0;
                                    }
                                }
                                return TokenType.Comment;

                                break;

                            default:
                                state = 0;
                                do
                                {
                                    if (state == 0 &&
                                    ((currentChar >= 'a' && currentChar <= 'z') ||
                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                    currentChar == '_' ||
                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                        state = 1;
                                    else if (state == 1 &&
                                    ((currentChar >= 'a' && currentChar <= 'z') ||
                                    (currentChar >= 'A' && currentChar <= 'Z') ||
                                    (currentChar >= '0' && currentChar <= '9') ||
                                    currentChar == '_' ||
                                    (currentChar >= '\u007f' && currentChar <= '\uffff')))
                                        state = 1;
                                    else if (state == 1 || state == 2)
                                    {
                                        charIndex--;
                                        return TokenType.Identifier;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                while (NextChar());

                                state = 0;
                                do
                                {
                                    if ((state == 0 || state == 1) && currentChar > 47 && currentChar < 58)
                                        state = 1;
                                    else if (state == 1 && currentChar == '.')
                                        state = 2;
                                    else if (state == 2 && currentChar > 47 && currentChar < 58)
                                        state = 3;
                                    else if (state != 0)
                                    {
                                        charIndex--;
                                        return TokenType.Number;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                while (NextChar());

                                break;

                        }

                        return TokenType.Unknown;
                    }
                }


            return TokenType.EndOfFile;
        }

        public List<Token> GetTokens()
        {
            charIndex = -1;

            TokenType tokenType;

            int lastIndex = -1;

            var tokens = new List<Token>();

            while ((tokenType = GetToken()) != TokenType.EndOfFile)
            {
                var index = lastIndex + 1;
                var lexeme = text.Substring(index, charIndex - lastIndex);

                if (tokenType == TokenType.Identifier)
                {
                    switch (lexeme.Length)
                    {
                        case 8:
                            if ((lexeme[0] == 'a' &&
                            lexeme[1] == 'b' &&
                            lexeme[2] == 's' &&
                            lexeme[3] == 't' &&
                            lexeme[4] == 'r' &&
                            lexeme[5] == 'a' &&
                            lexeme[6] == 'c' &&
                            lexeme[7] == 't') ||
                            (lexeme[0] == 'c' &&
                            lexeme[1] == 'o' &&
                            lexeme[2] == 'n' &&
                            lexeme[3] == 't' &&
                            lexeme[4] == 'i' &&
                            lexeme[5] == 'n' &&
                            lexeme[6] == 'u' &&
                            lexeme[7] == 'e') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == 'w' &&
                            lexeme[4] == 'h' &&
                            lexeme[5] == 'i' &&
                            lexeme[6] == 'l' &&
                            lexeme[7] == 'e') ||
                            (lexeme[0] == 'f' &&
                            lexeme[1] == 'u' &&
                            lexeme[2] == 'n' &&
                            lexeme[3] == 'c' &&
                            lexeme[4] == 't' &&
                            lexeme[5] == 'i' &&
                            lexeme[6] == 'o' &&
                            lexeme[7] == 'n'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 3:
                            if ((lexeme[0] == 'a' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd') ||
                            (lexeme[0] == 'f' &&
                            lexeme[1] == 'o' &&
                            lexeme[2] == 'r') ||
                            (lexeme[0] == 'n' &&
                            lexeme[1] == 'e' &&
                            lexeme[2] == 'w') ||
                            (lexeme[0] == 't' &&
                            lexeme[1] == 'r' &&
                            lexeme[2] == 'y') ||
                            (lexeme[0] == 'u' &&
                            lexeme[1] == 's' &&
                            lexeme[2] == 'e') ||
                            (lexeme[0] == 'v' &&
                            lexeme[1] == 'a' &&
                            lexeme[2] == 'r') ||
                            (lexeme[0] == 'x' &&
                            lexeme[1] == 'o' &&
                            lexeme[2] == 'r'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 5:
                            if ((lexeme[0] == 'a' &&
                            lexeme[1] == 'r' &&
                            lexeme[2] == 'r' &&
                            lexeme[3] == 'a' &&
                            lexeme[4] == 'y') ||
                            (lexeme[0] == 'b' &&
                            lexeme[1] == 'r' &&
                            lexeme[2] == 'e' &&
                            lexeme[3] == 'a' &&
                            lexeme[4] == 'k') ||
                            (lexeme[0] == 'c' &&
                            lexeme[1] == 'a' &&
                            lexeme[2] == 't' &&
                            lexeme[3] == 'c' &&
                            lexeme[4] == 'h') ||
                            (lexeme[0] == 'c' &&
                            lexeme[1] == 'l' &&
                            lexeme[2] == 'a' &&
                            lexeme[3] == 's' &&
                            lexeme[4] == 's') ||
                            (lexeme[0] == 'c' &&
                            lexeme[1] == 'l' &&
                            lexeme[2] == 'o' &&
                            lexeme[3] == 'n' &&
                            lexeme[4] == 'e') ||
                            (lexeme[0] == 'c' &&
                            lexeme[1] == 'o' &&
                            lexeme[2] == 'n' &&
                            lexeme[3] == 's' &&
                            lexeme[4] == 't') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == 'i' &&
                            lexeme[4] == 'f') ||
                            (lexeme[0] == 'f' &&
                            lexeme[1] == 'i' &&
                            lexeme[2] == 'n' &&
                            lexeme[3] == 'a' &&
                            lexeme[4] == 'l') ||
                            (lexeme[0] == 't' &&
                            lexeme[1] == 'h' &&
                            lexeme[2] == 'r' &&
                            lexeme[3] == 'o' &&
                            lexeme[4] == 'w') ||
                            (lexeme[0] == 'w' &&
                            lexeme[1] == 'h' &&
                            lexeme[2] == 'i' &&
                            lexeme[3] == 'l' &&
                            lexeme[4] == 'e'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 2:
                            if ((lexeme[0] == 'a' &&
                            lexeme[1] == 's') ||
                            (lexeme[0] == 'd' &&
                            lexeme[1] == 'o') ||
                            (lexeme[0] == 'i' &&
                            lexeme[1] == 'f') ||
                            (lexeme[0] == 'o' &&
                            lexeme[1] == 'r'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 4:
                            if ((lexeme[0] == 'c' &&
                            lexeme[1] == 'a' &&
                            lexeme[2] == 's' &&
                            lexeme[3] == 'e') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'l' &&
                            lexeme[2] == 's' &&
                            lexeme[3] == 'e') ||
                            (lexeme[0] == 'g' &&
                            lexeme[1] == 'o' &&
                            lexeme[2] == 't' &&
                            lexeme[3] == 'o'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 9:
                            if ((lexeme[0] == 'c' &&
                            lexeme[1] == 'f' &&
                            lexeme[2] == 'u' &&
                            lexeme[3] == 'n' &&
                            lexeme[4] == 'c' &&
                            lexeme[5] == 't' &&
                            lexeme[6] == 'i' &&
                            lexeme[7] == 'o' &&
                            lexeme[8] == 'n') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == 's' &&
                            lexeme[4] == 'w' &&
                            lexeme[5] == 'i' &&
                            lexeme[6] == 't' &&
                            lexeme[7] == 'c' &&
                            lexeme[8] == 'h') ||
                            (lexeme[0] == 'i' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 't' &&
                            lexeme[3] == 'e' &&
                            lexeme[4] == 'r' &&
                            lexeme[5] == 'f' &&
                            lexeme[6] == 'a' &&
                            lexeme[7] == 'c' &&
                            lexeme[8] == 'e') ||
                            (lexeme[0] == 'n' &&
                            lexeme[1] == 'a' &&
                            lexeme[2] == 'm' &&
                            lexeme[3] == 'e' &&
                            lexeme[4] == 's' &&
                            lexeme[5] == 'p' &&
                            lexeme[6] == 'a' &&
                            lexeme[7] == 'c' &&
                            lexeme[8] == 'e') ||
                            (lexeme[0] == 'p' &&
                            lexeme[1] == 'r' &&
                            lexeme[2] == 'o' &&
                            lexeme[3] == 't' &&
                            lexeme[4] == 'e' &&
                            lexeme[5] == 'c' &&
                            lexeme[6] == 't' &&
                            lexeme[7] == 'e' &&
                            lexeme[8] == 'd'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 7:
                            if ((lexeme[0] == 'd' &&
                            lexeme[1] == 'e' &&
                            lexeme[2] == 'c' &&
                            lexeme[3] == 'l' &&
                            lexeme[4] == 'a' &&
                            lexeme[5] == 'r' &&
                            lexeme[6] == 'e') ||
                            (lexeme[0] == 'd' &&
                            lexeme[1] == 'e' &&
                            lexeme[2] == 'f' &&
                            lexeme[3] == 'a' &&
                            lexeme[4] == 'u' &&
                            lexeme[5] == 'l' &&
                            lexeme[6] == 't') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'x' &&
                            lexeme[2] == 't' &&
                            lexeme[3] == 'e' &&
                            lexeme[4] == 'n' &&
                            lexeme[5] == 'd' &&
                            lexeme[6] == 's') ||
                            (lexeme[0] == 'f' &&
                            lexeme[1] == 'o' &&
                            lexeme[2] == 'r' &&
                            lexeme[3] == 'e' &&
                            lexeme[4] == 'a' &&
                            lexeme[5] == 'c' &&
                            lexeme[6] == 'h') ||
                            (lexeme[0] == 'p' &&
                            lexeme[1] == 'r' &&
                            lexeme[2] == 'i' &&
                            lexeme[3] == 'v' &&
                            lexeme[4] == 'a' &&
                            lexeme[5] == 't' &&
                            lexeme[6] == 'e'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 6:
                            if ((lexeme[0] == 'e' &&
                            lexeme[1] == 'l' &&
                            lexeme[2] == 's' &&
                            lexeme[3] == 'e' &&
                            lexeme[4] == 'i' &&
                            lexeme[5] == 'f') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == 'f' &&
                            lexeme[4] == 'o' &&
                            lexeme[5] == 'r') ||
                            (lexeme[0] == 'g' &&
                            lexeme[1] == 'l' &&
                            lexeme[2] == 'o' &&
                            lexeme[3] == 'b' &&
                            lexeme[4] == 'a' &&
                            lexeme[5] == 'l') ||
                            (lexeme[0] == 'p' &&
                            lexeme[1] == 'u' &&
                            lexeme[2] == 'b' &&
                            lexeme[3] == 'l' &&
                            lexeme[4] == 'i' &&
                            lexeme[5] == 'c') ||
                            (lexeme[0] == 's' &&
                            lexeme[1] == 't' &&
                            lexeme[2] == 'a' &&
                            lexeme[3] == 't' &&
                            lexeme[4] == 'i' &&
                            lexeme[5] == 'c') ||
                            (lexeme[0] == 's' &&
                            lexeme[1] == 'w' &&
                            lexeme[2] == 'i' &&
                            lexeme[3] == 't' &&
                            lexeme[4] == 'c' &&
                            lexeme[5] == 'h'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 10:
                            if ((lexeme[0] == 'e' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == 'd' &&
                            lexeme[4] == 'e' &&
                            lexeme[5] == 'c' &&
                            lexeme[6] == 'l' &&
                            lexeme[7] == 'a' &&
                            lexeme[8] == 'r' &&
                            lexeme[9] == 'e') ||
                            (lexeme[0] == 'e' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == 'f' &&
                            lexeme[4] == 'o' &&
                            lexeme[5] == 'r' &&
                            lexeme[6] == 'e' &&
                            lexeme[7] == 'a' &&
                            lexeme[8] == 'c' &&
                            lexeme[9] == 'h') ||
                            (lexeme[0] == 'i' &&
                            lexeme[1] == 'm' &&
                            lexeme[2] == 'p' &&
                            lexeme[3] == 'l' &&
                            lexeme[4] == 'e' &&
                            lexeme[5] == 'm' &&
                            lexeme[6] == 'e' &&
                            lexeme[7] == 'n' &&
                            lexeme[8] == 't' &&
                            lexeme[9] == 's') ||
                            (lexeme[0] == 'i' &&
                            lexeme[1] == 'n' &&
                            lexeme[2] == 's' &&
                            lexeme[3] == 't' &&
                            lexeme[4] == 'a' &&
                            lexeme[5] == 'n' &&
                            lexeme[6] == 'c' &&
                            lexeme[7] == 'e' &&
                            lexeme[8] == 'o' &&
                            lexeme[9] == 'f'))
                                tokenType = TokenType.Keyword;
                            break;
                        case 12:
                            if ((lexeme[0] == 'o' &&
                            lexeme[1] == 'l' &&
                            lexeme[2] == 'd' &&
                            lexeme[3] == '_' &&
                            lexeme[4] == 'f' &&
                            lexeme[5] == 'u' &&
                            lexeme[6] == 'n' &&
                            lexeme[7] == 'c' &&
                            lexeme[8] == 't' &&
                            lexeme[9] == 'i' &&
                            lexeme[10] == 'o' &&
                            lexeme[11] == 'n'))
                                tokenType = TokenType.Keyword;
                            break;
                    }

                }

                tokens.Add(new Token(tokenType, lexeme, index));

                lastIndex = charIndex;
            }

            return tokens;
        }
    }
}
