using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PhpVH.LexicalAnalysis;

namespace PhpVH.CodeAnalysis
{
    public class BooleanExpressionAnalyzer : ExpressionAnalyzer
    {
        private TokenType[] _operators = new[]
        {
            TokenType.EqualityOperator,
            TokenType.NotEqualOperator,
            TokenType.IdenticalOperator,
            TokenType.NotIdenticalOperator,                
        };

        protected override void AnalyzeCore(Token token)
        {
            if (token.TokenType == TokenType.WhiteSpace ||
                token.TokenType == TokenType.Comment)
            {
                return;
            }
            else if (State == 0 &&
                token.TokenType == TokenType.Variable &&
                Php.Superglobals.Contains(token.Lexeme))
            {
                AddExpressionToken();
            }
            else if (State == 1 && token.TokenType == TokenType.LeftBracket)
            {
                State++;
            }
            else if (State == 2 && token.TokenType == TokenType.String)
            {
                AddExpressionToken();
            }
            else if (State == 3 && token.TokenType == TokenType.RightBracket)
            {
                State++;
            }
            else if (State == 4 && _operators.Contains(token.TokenType))
            {
                AddExpressionToken();
            }
            else if (State == 5 && token.TokenType == TokenType.String)
            {
                AddExpressionToken();
                AddExpression();
            }
            else
            {
                NewExpression();                
            }
        }
    }
}
