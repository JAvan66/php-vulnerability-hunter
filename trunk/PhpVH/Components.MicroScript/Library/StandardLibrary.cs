using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using Components.MicroScript.Interpreter;

namespace Components.MicroScript.Library
{
    [MicroScriptLibrary("standard")]
    public class StandardLibrary
    {
        [MicroScriptInteropFunction("print")]
        private static void Print(object message)
        {
            Console.WriteLine(message.ToString());
        }

        [MicroScriptInteropFunction("input")]
        private static string ReadLine()
        {
            return Console.ReadLine();
        }

        [MicroScriptInteropFunction("str")]
        private static string ConvertToString(object obj)
        {
            return Convert.ToString(obj);
        }

        [MicroScriptInteropFunction("hexb")]
        private static string ConvertToHexByteString(decimal value)
        {
            return Convert.ToString((byte)value, 16).PadLeft(2, '0');
        }

        [MicroScriptInteropFunction("range")]
        private static List<MicroScriptObject> Range(decimal start, decimal count)
        {
            return Enumerable
                .Range((int)start, (int)count)
                .Select(x => new MicroScriptObject((decimal)x))
                .ToList();
        }

        [MicroScriptInteropFunction("__list.add")]
        private static void ListAdd(List<MicroScriptObject> list, object value)
        {
            list.Add (new MicroScriptObject(value));
        }

        [MicroScriptInteropFunction("__list.contains")]
        private static bool ListContains(List<MicroScriptObject> list, object value)
        {
            var s = list.Any (x => x.Value.Equals(value));
            return  s;
            //list.Add (new MicroScriptObject(value));
        }

        [MicroScriptInteropFunction("__list.insert")]
        private static void ListAdd(List<MicroScriptObject> list, decimal index, object value)
        {
            list.Insert((int)index, new MicroScriptObject(value));
        }

        [MicroScriptInteropFunction("__list.count")]
        private static decimal ListAdd(List<MicroScriptObject> list)
        {
            return (decimal)list.Count;
        }

        [MicroScriptInteropFunction("__string.getChars")]
        private static List<MicroScriptObject> StringGetChars(string str)
        {
            return str.Select(x => new MicroScriptObject(x.ToString())).ToList();
        }        
    }
}

