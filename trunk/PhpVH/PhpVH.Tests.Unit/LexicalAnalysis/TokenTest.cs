using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using PhpVH.LexicalAnalysis;

namespace PhpVH.Tests.Unit.LexicalAnalysis
{
    [TestFixture]
    public class TokenTest
    {
        private static List<TokenType> keywordTokenTypes = new List<TokenType> {
            TokenType.abstractKeyword,
            TokenType.andKeyword,
            TokenType.arrayKeyword,
            TokenType.asKeyword,
            TokenType.breakKeyword,
            TokenType.caseKeyword,
            TokenType.catchKeyword,
            TokenType.cfunctionKeyword,
            TokenType.classKeyword,
            TokenType.cloneKeyword,
            TokenType.constKeyword,
            TokenType.continueKeyword,
            TokenType.declareKeyword,
            TokenType.defaultKeyword,
            TokenType.doKeyword,
            TokenType.elseKeyword,
            TokenType.elseifKeyword,
            TokenType.enddeclareKeyword,
            TokenType.endforKeyword,
            TokenType.endforeachKeyword,
            TokenType.endifKeyword,
            TokenType.endswitchKeyword,
            TokenType.endwhileKeyword,
            TokenType.extendsKeyword,
            TokenType.finalKeyword,
            TokenType.forKeyword,
            TokenType.foreachKeyword,
            TokenType.functionKeyword,
            TokenType.globalKeyword,
            TokenType.gotoKeyword,
            TokenType.ifKeyword,
            TokenType.implementsKeyword,
            TokenType.interfaceKeyword,
            TokenType.instanceofKeyword,
            TokenType.namespaceKeyword,
            TokenType.newKeyword,
            TokenType.old_functionKeyword,
            TokenType.orKeyword,
            TokenType.privateKeyword,
            TokenType.protectedKeyword,
            TokenType.publicKeyword,
            TokenType.staticKeyword,
            TokenType.switchKeyword,
            TokenType.throwKeyword,
            TokenType.tryKeyword,
            TokenType.useKeyword,
            TokenType.varKeyword,
            TokenType.whileKeyword,
            TokenType.xorKeyword
        };

        private static IEnumerable<TokenType> getNonKeywordTokenTypes()
        {
            foreach (TokenType tokenType in Enum.GetValues(typeof(TokenType)))
                if (!keywordTokenTypes.Contains(tokenType))
                    yield return tokenType;
        }

        [Test]
        public void Token_ToString()
        {
            var token = new Token(TokenType.OpenTag, "<?", 0);
            Assert.AreEqual("[0] OpenTag: <?", token.ToString());
        }

        [Test]
        public void Token_IsKeyword()
        {
            Assert.AreEqual(49, keywordTokenTypes.Count); // brittle test but ensures if extra keywords are added a test will fail
            foreach (var tokenType in keywordTokenTypes)
                Assert.True(new Token(tokenType, "lexeme", 0).IsKeyword());
        }

        [Test]
        public void Token_Not_IsKeyword()
        {
            var nonKeywordTokenTypes = getNonKeywordTokenTypes();
            Assert.AreEqual(62, nonKeywordTokenTypes.Count()); // brittle test but ensures if extra keywords are added a test will fail
            foreach (var tokenType in nonKeywordTokenTypes)
                Assert.False(new Token(tokenType, "lexeme", 0).IsKeyword());
        }
    }
}
