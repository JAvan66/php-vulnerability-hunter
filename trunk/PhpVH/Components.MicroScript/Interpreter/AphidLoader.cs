using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Components.Aphid.Interpreter
{
    public class AphidLoader
    {
        private AphidInterpreter _interpreter;

        public AphidLoader(AphidInterpreter interpreter)
        {
            _interpreter = interpreter;
        }

        public void LoadLibrary(Type libraryType, AphidObject scope)
        {
            var methods = libraryType
                .GetMethods(
                    BindingFlags.Static | 
                    BindingFlags.NonPublic |
                    BindingFlags.Public)
                .Select (x => new
                {
                    Method = x,
                    Attributes = x
                        .GetCustomAttributes (true)
                        .Where (y => y is AphidInteropFunctionAttribute)
                        .Cast<AphidInteropFunctionAttribute>()
                        .ToArray ()
                })
                .SelectMany (x => x.Attributes.Select (y => Tuple.Create (y.Name, x.Method)));

            foreach (var method in methods) 
            {
                SetMember(scope, method.Item1, new AphidInteropFunction(method.Item2));
            }
        }

        public void LoadLibrary<TLibrary>(AphidObject scope)
        {
            LoadLibrary(typeof(TLibrary), scope);
        }

        public void SetMember(AphidObject scope, string path, object value)
        {
            var members = path.Split('.');
            
            var currentObj = scope;
            
            foreach (var m in members)
            {
                if (!currentObj.ContainsKey(m))
                {
                    currentObj.Add(m, new AphidObject());
                }
                
                currentObj = currentObj[m];
            }
            
            currentObj.Value = value;
        }
    }
}

